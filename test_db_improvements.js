/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ retry –ª–æ–≥–∏–∫–∏, timeout handling –∏ stability
 */

const http = require('http');

class DatabaseTester {
  constructor() {
    this.port = process.env.NODE_PORT || 3001;
    this.baseUrl = `http://localhost:${this.port}`;
    this.testResults = [];
  }

  async runTests() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

    await this.testHealthCheck();
    await this.testAddCar();
    await this.testDuplicateCheck();
    await this.testServerStability();
    
    this.printSummary();
  }

  async testHealthCheck() {
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç Health Check...');
    
    try {
      const health = await this.makeRequest('/api/health');
      
      if (health.server && health.database) {
        console.log('‚úÖ Health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ');
        console.log(`   üìä Server status: ${health.server.status}`);
        console.log(`   üìä Database connected: ${health.database.connected}`);
        console.log(`   üìä Pool stats: ${JSON.stringify(health.database.pool)}`);
        this.testResults.push({ test: 'Health Check', status: '‚úÖ PASS' });
      } else {
        throw new Error('Invalid health response');
      }
    } catch (error) {
      console.log(`‚ùå Health check failed: ${error.message}`);
      this.testResults.push({ test: 'Health Check', status: '‚ùå FAIL', error: error.message });
    }
    
    console.log('');
  }

  async testAddCar() {
    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è...');
    
    const testCar = {
      custom_id: `test_${Date.now()}`,
      brand: 'Toyota',
      model: 'Camry',
      year: 2023,
      price: 25000,
      description: 'Test car for database improvements',
      photos: ['test1.jpg', 'test2.jpg'],
      source_message_id: 12345,
      source_channel_name: 'test_channel'
    };

    try {
      const startTime = Date.now();
      const result = await this.makeRequest('/api/cars', 'POST', testCar);
      const duration = Date.now() - startTime;
      
      if (result.car && result.car.custom_id === testCar.custom_id) {
        console.log(`‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}–º—Å`);
        console.log(`   üöó ID: ${result.car.custom_id}`);
        console.log(`   üöó Brand: ${result.car.brand} ${result.car.model}`);
        this.testResults.push({ 
          test: 'Add Car', 
          status: '‚úÖ PASS', 
          duration: `${duration}ms`,
          carId: result.car.custom_id 
        });
      } else {
        throw new Error('Invalid add car response');
      }
    } catch (error) {
      console.log(`‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è failed: ${error.message}`);
      this.testResults.push({ test: 'Add Car', status: '‚ùå FAIL', error: error.message });
    }
    
    console.log('');
  }

  async testDuplicateCheck() {
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
    
    try {
      const result = await this.makeRequest('/api/cars/check-duplicate/12345/test_channel');
      
      if (result && result.custom_id) {
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`   üîç –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: ${result.custom_id}`);
        this.testResults.push({ test: 'Duplicate Check', status: '‚úÖ PASS' });
      } else {
        console.log('‚ÑπÔ∏è –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)');
        this.testResults.push({ test: 'Duplicate Check', status: '‚úÖ PASS (no duplicates)' });
      }
    } catch (error) {
      console.log(`‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ failed: ${error.message}`);
      this.testResults.push({ test: 'Duplicate Check', status: '‚ùå FAIL', error: error.message });
    }
    
    console.log('');
  }

  async testServerStability() {
    console.log('4Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)...');
    
    const requests = 5;
    const results = [];
    
    try {
      console.log(`   üì° –û—Ç–ø—Ä–∞–≤–∫–∞ ${requests} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);
      
      const promises = [];
      for (let i = 0; i < requests; i++) {
        promises.push(
          this.makeRequest('/api/health').then(res => ({ index: i, success: true, res })).catch(err => ({ index: i, success: false, error: err.message }))
        );
      }
      
      const responses = await Promise.all(promises);
      const successful = responses.filter(r => r.success).length;
      
      console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successful}/${requests}`);
      
      if (successful === requests) {
        console.log('‚úÖ –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ');
        this.testResults.push({ test: 'Server Stability', status: '‚úÖ PASS', successRate: `${successful}/${requests}` });
      } else {
        console.log(`‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ —É–¥–∞–ª–∏—Å—å: ${requests - successful} failed`);
        this.testResults.push({ test: 'Server Stability', status: '‚ö†Ô∏è PARTIAL', successRate: `${successful}/${requests}` });
      }
      
    } catch (error) {
      console.log(`‚ùå –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ failed: ${error.message}`);
      this.testResults.push({ test: 'Server Stability', status: '‚ùå FAIL', error: error.message });
    }
    
    console.log('');
  }

  async makeRequest(path, method = 'GET', data = null) {
    return new Promise((resolve, reject) => {
      const options = {
        hostname: 'localhost',
        port: this.port,
        path: path,
        method: method,
        timeout: 10000
      };

      if (data) {
        options.headers = {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(JSON.stringify(data))
        };
      }

      const req = http.request(options, (res) => {
        let responseData = '';
        
        res.on('data', (chunk) => {
          responseData += chunk;
        });

        res.on('end', () => {
          try {
            const result = JSON.parse(responseData);
            
            if (res.statusCode >= 200 && res.statusCode < 300) {
              resolve(result);
            } else {
              reject(new Error(`HTTP ${res.statusCode}: ${result.error || result.message || 'Unknown error'}`));
            }
          } catch (parseError) {
            reject(new Error(`Invalid JSON response: ${parseError.message}`));
          }
        });
      });

      req.on('error', (error) => {
        reject(new Error(`Request failed: ${error.message}`));
      });

      req.on('timeout', () => {
        req.destroy();
        reject(new Error('Request timeout'));
      });

      if (data) {
        req.write(JSON.stringify(data));
      }

      req.end();
    });
  }

  printSummary() {
    console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('=' * 50);
    
    this.testResults.forEach((result, index) => {
      console.log(`${index + 1}. ${result.test}: ${result.status}`);
      if (result.duration) console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${result.duration}`);
      if (result.successRate) console.log(`   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${result.successRate}`);
      if (result.carId) console.log(`   üÜî ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${result.carId}`);
      if (result.error) console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
    });
    
    console.log('=' * 50);
    
    const passed = this.testResults.filter(r => r.status.includes('‚úÖ')).length;
    const total = this.testResults.length;
    
    if (passed === total) {
      console.log(`üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò: ${passed}/${total}`);
      console.log('‚úÖ –£–ª—É—á—à–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
      console.log(`‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: ${passed}/${total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏`);
      console.log('üîß –í–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
async function checkServerRunning() {
  try {
    const req = http.request({
      hostname: 'localhost',
      port: process.env.NODE_PORT || 3001,
      path: '/api/health',
      timeout: 5000
    }, (res) => {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n');
      new DatabaseTester().runTests();
    });

    req.on('error', () => {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!');
      console.log('üöÄ –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:');
      console.log('   node app/db/server_improved.js');
      console.log('   –∏–ª–∏');
      console.log('   node app/db/start_improved_server.js');
      process.exit(1);
    });

    req.end();
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
    process.exit(1);
  }
}

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
checkServerRunning(); 