import os
import asyncio
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ContextTypes, CallbackQueryHandler,
    ConversationHandler
)

# --- –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ---
from telethon import TelegramClient, events

# --- –ù–∞—à–∏ –º–æ–¥—É–ª–∏ ---
from app.bot.database import init_db, save_application, SessionLocal, Car, Application as ApplicationDB
from app.utils.channel_parser import convert_telethon_message_to_announcement
from app.pipeline import process_single_announcement
from app.core.perplexity import PerplexityProcessor
from app.utils.config import get_pricing_config, set_pricing_config

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()
init_db()

# Telethon
API_ID = os.getenv("TELEGRAM_API_ID")
API_HASH = os.getenv("TELEGRAM_API_HASH")
SESSION_NAME = "telegram_session"
SOURCE_CHANNEL = os.getenv("TELEGRAM_CHANNEL")
TELEGRAM_PHONE = os.getenv("TELEGRAM_PHONE")
TELEGRAM_PASSWORD = os.getenv("TELEGRAM_PASSWORD")

# Telegram Bot
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_GROUP_ID = int(os.getenv("ADMIN_GROUP_ID"))
ADMIN_USER_IDS = [int(admin_id) for admin_id in os.getenv("ADMIN_USER_IDS", "").split(',') if admin_id]


# –û–±—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã
PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY")
perplexity_processor = PerplexityProcessor(PERPLEXITY_API_KEY)
MARKUP_PERCENTAGE = get_pricing_config()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
SET_MARKUP = range(1)

# --- –ö–ª–∏–µ–Ω—Ç Telethon –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è ---
client = TelegramClient(
    SESSION_NAME, 
    API_ID, 
    API_HASH,
    connection_retries=5,
    timeout=20
)

@client.on(events.NewMessage(chats=SOURCE_CHANNEL))
async def new_post_handler(event):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞-–¥–æ–Ω–æ—Ä–∞."""
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ {SOURCE_CHANNEL}. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    db_session = SessionLocal()
    try:
        announcement = await convert_telethon_message_to_announcement(event.message)
        if announcement:
            await process_single_announcement(
                ann=announcement,
                db_session=db_session,
                perplexity_processor=perplexity_processor,
                source_channel=SOURCE_CHANNEL,
                markup_percentage=MARKUP_PERCENTAGE
            )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ {event.message.id}: {e}")
    finally:
        db_session.close()

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É %", callback_data='admin_set_markup')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

async def admin_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    query = update.callback_query
    await query.answer() # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

    user_id = query.from_user.id
    if user_id not in ADMIN_USER_IDS:
        await query.edit_message_text(text="‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if query.data == 'admin_stats':
        db_session = SessionLocal()
        try:
            car_count = db_session.query(Car).count()
            app_count = db_session.query(ApplicationDB).count()
            stats_text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**\n\n"
                f"üöó –í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: **{car_count}**\n"
                f"üìù –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞—è–≤–æ–∫: **{app_count}**"
            )
            await query.edit_message_text(text=stats_text, parse_mode='Markdown')
        except Exception as e:
            await query.edit_message_text(text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        finally:
            db_session.close()

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Ü–µ–Ω–∫–∏ (–≤—Ö–æ–¥–∏—Ç –≤ ConversationHandler, –Ω–æ —Å–∞–º –∫–æ–ª–ª–±—ç–∫ –∑–¥–µ—Å—å)
    elif query.data == 'admin_set_markup':
        await query.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏ –≤ —á–∞—Ç.", show_alert=True)
        await query.edit_message_text(
            text=f"–¢–µ–∫—É—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: **{MARKUP_PERCENTAGE}%**\n\n"
                 f"‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            parse_mode='Markdown'
        )
        return SET_MARKUP

async def handle_set_markup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏."""
    global MARKUP_PERCENTAGE
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END

    try:
        new_markup = float(update.message.text.replace(',', '.'))
        set_pricing_config(new_markup)
        MARKUP_PERCENTAGE = new_markup
        await update.message.reply_text(f"‚úÖ –ù–∞—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_markup}%.")
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –∏–ª–∏ 12.5).")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

    return ConversationHandler.END

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (python-telegram-bot) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É, –∏ –æ–Ω–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    save_application(user.id, user.username, update.message.text)
    
    forward_text = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{user.username} (ID: {user.id}):\n\n{update.message.text}"
    await context.bot.send_message(chat_id=ADMIN_GROUP_ID, text=forward_text)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")

async def post_init(application: Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PTB (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telethon)."""
    await client.start(phone=TELEGRAM_PHONE, password=TELEGRAM_PASSWORD)
    print("–ö–ª–∏–µ–Ω—Ç Telethon –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∑–∞–ø—É—â–µ–Ω.")
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–µ '{SOURCE_CHANNEL}'...")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è."""
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(BOT_TOKEN).post_init(post_init).build()

    # –î–∏–∞–ª–æ–≥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Ü–µ–Ω–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_callbacks, pattern='^admin_set_markup$')],
        states={
            SET_MARKUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_set_markup)],
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation)],
    )

    application.add_handler(conv_handler)

    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CallbackQueryHandler(admin_callbacks, pattern='^admin_stats$')) # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ. `run_polling` –±–ª–æ–∫–∏—Ä—É—é—â–∏–π,
    # –∞ `post_init` –∑–∞–ø—É—Å—Ç–∏—Ç Telethon –≤ —Ç–æ–º –∂–µ event loop.
    application.run_polling()

if __name__ == '__main__':
    main()
