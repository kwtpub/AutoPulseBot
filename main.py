import os
import asyncio
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ContextTypes, CallbackQueryHandler,
    ConversationHandler
)
#new comm
# --- –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ---
from telethon import TelegramClient, events

# --- –ù–∞—à–∏ –º–æ–¥—É–ª–∏ ---
from app.bot.database import init_db, save_application, SessionLocal, Car, Application as ApplicationDB
from app.utils.channel_parser import convert_telethon_message_to_announcement, fetch_announcements_from_channel
from app.pipeline import process_single_announcement
from app.core.perplexity import PerplexityProcessor
from app.utils.config import get_pricing_config, set_pricing_config

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()

# --- –û–¢–õ–ê–î–ö–ê ---
print("\n--- –î–ï–ë–ê–ì: –ß–¢–ï–ù–ò–ï –ö–ê–ù–ê–õ–û–í ---")
raw_channels_str = os.getenv("TELEGRAM_CHANNEL", "–ü–ï–†–ï–ú–ï–ù–ù–ê–Ø TELEGRAM_CHANNEL –ù–ï –ù–ê–ô–î–ï–ù–ê")
print(f"1. –°—ã—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–∑ .env: '{raw_channels_str}'")
parsed_channels_list = [channel.strip() for channel in raw_channels_str.split(',') if channel.strip()]
print(f"2. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {parsed_channels_list}")
print("--- –ö–û–ù–ï–¶ –î–ï–ë–ê–ì–ê ---\n")
# --- –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ---

init_db()

# Telethon
API_ID = os.getenv("TELEGRAM_API_ID")
API_HASH = os.getenv("TELEGRAM_API_HASH")
SESSION_NAME = "telegram_session"
# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
SOURCE_CHANNELS_STR = os.getenv("TELEGRAM_CHANNEL", "")
SOURCE_CHANNELS = [channel.strip() for channel in SOURCE_CHANNELS_STR.split(',') if channel.strip()]

TELEGRAM_PHONE = os.getenv("TELEGRAM_PHONE")
TELEGRAM_PASSWORD = os.getenv("TELEGRAM_PASSWORD")

# Telegram Bot
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_GROUP_ID = int(os.getenv("ADMIN_GROUP_ID"))
ADMIN_USER_IDS = [int(admin_id) for admin_id in os.getenv("ADMIN_USER_IDS", "").split(',') if admin_id]


# –û–±—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã
PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY")
perplexity_processor = PerplexityProcessor(PERPLEXITY_API_KEY)
MARKUP_PERCENTAGE = get_pricing_config()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
SET_MARKUP, PARSER_CHANNEL, PARSER_COUNT = range(3)

# --- –ö–ª–∏–µ–Ω—Ç Telethon –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è ---
client = TelegramClient(
    SESSION_NAME, 
    API_ID, 
    API_HASH,
    connection_retries=5,
    timeout=20
)

@client.on(events.NewMessage(chats=SOURCE_CHANNELS))
async def new_post_handler(event):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤-–¥–æ–Ω–æ—Ä–æ–≤."""
    source_channel_username = event.chat.username
    source_channel_url = f"https://t.me/{source_channel_username}"
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ {source_channel_url}. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    db_session = SessionLocal()
    try:
        announcement = await convert_telethon_message_to_announcement(event.message)
        if announcement:
            await process_single_announcement(
                ann=announcement,
                db_session=db_session,
                perplexity_processor=perplexity_processor,
                source_channel=source_channel_url, # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
                markup_percentage=MARKUP_PERCENTAGE
            )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ {event.message.id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {source_channel_url}: {e}")
    finally:
        db_session.close()

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
async def get_admin_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É %", callback_data='admin_set_markup')],
        [InlineKeyboardButton("üì° –ö–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data='admin_source_channels')],
        [InlineKeyboardButton("üîç –ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤", callback_data='admin_parser')],
    ])

async def get_back_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_back_to_main')]
    ])

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    reply_markup = await get_admin_keyboard()
    message = await update.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
    context.user_data['admin_message_id'] = message.message_id


async def admin_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    query = update.callback_query
    context.user_data['admin_message_id'] = query.message.message_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    user_id = query.from_user.id
    if user_id not in ADMIN_USER_IDS:
        await query.answer(show_alert=True, text="‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if query.data == 'admin_stats':
        await query.answer()
        db_session = SessionLocal()
        try:
            car_count = db_session.query(Car).count()
            app_count = db_session.query(ApplicationDB).count()
            stats_text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**\n\n"
                f"üöó –í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: **{car_count}**\n"
                f"üìù –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞—è–≤–æ–∫: **{app_count}**"
            )
            await query.edit_message_text(text=stats_text, parse_mode='Markdown', reply_markup=await get_admin_keyboard())
        except Exception as e:
            await query.edit_message_text(text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", reply_markup=await get_admin_keyboard())
        finally:
            db_session.close()

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Ü–µ–Ω–∫–∏
    elif query.data == 'admin_set_markup':
        await query.answer()
        await query.edit_message_text(
            text=f"–¢–µ–∫—É—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: **{MARKUP_PERCENTAGE}%**\n\n"
                 f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –∏–ª–∏ 12.5):",
            parse_mode='Markdown'
        )
        return SET_MARKUP

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    elif query.data == 'admin_source_channels':
        await query.answer()
        
        if not SOURCE_CHANNELS:
            text = "üì° **–ö–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã.**"
        else:
            channels_list_str = "\n".join([f"‚Ä¢ `{ch}`" for ch in SOURCE_CHANNELS])
            text = f"üì° **–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏:**\n\n{channels_list_str}\n\n" \
                   f"(–ó–∞–¥–∞—é—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `TELEGRAM_CHANNEL`)"

        await query.edit_message_text(
            text=text,
            reply_markup=await get_back_keyboard(),
            parse_mode='Markdown'
        )

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
    elif query.data == 'admin_parser':
        await query.answer()
        await query.edit_message_text(
            text="üîç **–ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤**\n\n"
                 f"–í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @milkos44556):",
            parse_mode='Markdown',
            reply_markup=await get_back_keyboard()
        )
        return PARSER_CHANNEL

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif query.data == 'admin_back_to_main':
        await query.answer()
        await query.edit_message_text(
            text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=await get_admin_keyboard()
        )

async def handle_set_markup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    global MARKUP_PERCENTAGE
    
    admin_message_id = context.user_data.get('admin_message_id')
    chat_id = update.effective_chat.id
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    await update.message.delete()

    if not admin_message_id:
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ /admin —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    reply_markup = await get_admin_keyboard()
    
    try:
        new_markup = float(update.message.text)
        if new_markup < 0 or new_markup > 100:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=admin_message_id,
                text="‚ùå –ù–∞—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=reply_markup
            )
            return SET_MARKUP
        
        MARKUP_PERCENTAGE = new_markup
        set_pricing_config(new_markup)
        
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=admin_message_id,
            text=f"‚úÖ –ù–∞—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: **{new_markup}%**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
    except ValueError:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=admin_message_id,
            text="‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 12.5):",
            reply_markup=reply_markup
        )
        return SET_MARKUP
    
    return ConversationHandler.END

async def handle_parser_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞."""
    admin_message_id = context.user_data.get('admin_message_id')
    chat_id = update.effective_chat.id
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.delete()
    
    if not admin_message_id:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ /admin —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
    channel = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞
    if not channel.startswith('@') and not channel.startswith('https://t.me/'):
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=admin_message_id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ https://t.me/username\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await get_back_keyboard()
        )
        return PARSER_CHANNEL
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['parser_channel'] = channel
    
    await context.bot.edit_message_text(
        chat_id=chat_id,
        message_id=admin_message_id,
        text=f"üîç **–ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤**\n\n"
             f"–ö–∞–Ω–∞–ª: `{channel}`\n\n"
             f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100):",
        parse_mode='Markdown',
        reply_markup=await get_back_keyboard()
    )
    
    return PARSER_COUNT

async def handle_parser_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥."""
    admin_message_id = context.user_data.get('admin_message_id')
    chat_id = update.effective_chat.id
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.delete()
    
    if not admin_message_id:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ /admin —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
    try:
        count = int(update.message.text)
        if count <= 0 or count > 1000:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=admin_message_id,
                text="‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=await get_back_keyboard()
            )
            return PARSER_COUNT
    except ValueError:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=admin_message_id,
            text="‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await get_back_keyboard()
        )
        return PARSER_COUNT
    
    channel = context.user_data.get('parser_channel')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    await context.bot.edit_message_text(
        chat_id=chat_id,
        message_id=admin_message_id,
        text=f"üîç **–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...**\n\n"
             f"–ö–∞–Ω–∞–ª: `{channel}`\n"
             f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
             f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...",
        parse_mode='Markdown',
        reply_markup=await get_back_keyboard()
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(run_parser_task(context, channel, count, admin_message_id, chat_id))
    except Exception as e:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=admin_message_id,
            text=f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:**\n\n{str(e)}",
            parse_mode='Markdown',
            reply_markup=await get_admin_keyboard()
        )
    
    return ConversationHandler.END

async def run_parser_task(context, channel, count, message_id, chat_id):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
    db_session = SessionLocal()
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        announcements = await fetch_announcements_from_channel(channel, limit=count)
        
        if not announcements:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞**\n\n"
                     f"–ö–∞–Ω–∞–ª: `{channel}`\n"
                     f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: 0\n\n"
                     f"‚ÑπÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                parse_mode='Markdown',
                reply_markup=await get_admin_keyboard()
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        processed_count = 0
        for announcement in announcements:
            try:
                await process_single_announcement(
                    ann=announcement,
                    db_session=db_session,
                    perplexity_processor=perplexity_processor,
                    source_channel=channel,
                    markup_percentage=MARKUP_PERCENTAGE
                )
                processed_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"‚úÖ **–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                 f"–ö–∞–Ω–∞–ª: `{channel}`\n"
                 f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(announcements)}\n"
                 f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {processed_count}\n\n"
                 f"üöó –û–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥.",
            parse_mode='Markdown',
            reply_markup=await get_admin_keyboard()
        )
        
    except Exception as e:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"‚ùå **–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:**\n\n{str(e)}",
            parse_mode='Markdown',
            reply_markup=await get_admin_keyboard()
        )
    finally:
        db_session.close()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (python-telegram-bot) ---
async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END
    
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=await get_admin_keyboard())
    return ConversationHandler.END

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É, –∏ –æ–Ω–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")

async def chatid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —á–∞—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    chat_title = update.effective_chat.title or "–õ–∏—á–Ω—ã–π —á–∞—Ç"
    
    await update.message.reply_text(
        f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**\n\n"
        f"üÜî Chat ID: `{chat_id}`\n"
        f"üìù –¢–∏–ø: {chat_type}\n"
        f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}",
        parse_mode='Markdown'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    save_application(user.id, user.username, update.message.text)
    
    forward_text = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{user.username} (ID: {user.id}):\n\n{update.message.text}"
    await context.bot.send_message(chat_id=ADMIN_GROUP_ID, text=forward_text)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")

async def post_init(application: Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PTB (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telethon)."""
    if not SOURCE_CHANNELS:
        print("‚ö†Ô∏è  –ö–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ .env (TELEGRAM_CHANNEL). –ö–ª–∏–µ–Ω—Ç Telethon –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        return
        
    await client.start(phone=TELEGRAM_PHONE, password=TELEGRAM_PASSWORD)
    print("–ö–ª–∏–µ–Ω—Ç Telethon –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∑–∞–ø—É—â–µ–Ω.")
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö: {', '.join(SOURCE_CHANNELS)}")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è."""
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(BOT_TOKEN).post_init(post_init).build()

    # –î–∏–∞–ª–æ–≥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Ü–µ–Ω–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_callbacks, pattern='^admin_set_markup$')],
        states={
            SET_MARKUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_set_markup)],
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation)],
        per_message=False # –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    )

    # –î–∏–∞–ª–æ–≥ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
    parser_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_callbacks, pattern='^admin_parser$')],
        states={
            PARSER_CHANNEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_parser_channel)],
            PARSER_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_parser_count)],
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation)],
        per_message=False
    )

    application.add_handler(conv_handler)
    application.add_handler(parser_conv_handler)

    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("admin", admin_panel))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω-–∫–æ–ª–ª–±—ç–∫–æ–≤ (–∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è ConversationHandler)
    application.add_handler(CallbackQueryHandler(admin_callbacks, pattern='^admin_(stats|source_channels|back_to_main)$'))

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("chatid", chatid))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ. `run_polling` –±–ª–æ–∫–∏—Ä—É—é—â–∏–π,
    # –∞ `post_init` –∑–∞–ø—É—Å—Ç–∏—Ç Telethon –≤ —Ç–æ–º –∂–µ event loop.
    application.run_polling()

if __name__ == '__main__':
    main()
 
