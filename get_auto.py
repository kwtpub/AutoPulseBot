#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ custom_id
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python get_auto.py <custom_id> <user_id>
"""
import sys
import os
import asyncio
import aiohttp
from dotenv import load_dotenv
from telethon import TelegramClient
from telethon.sessions import StringSession
from io import BytesIO

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
api_id = int(os.getenv("TELEGRAM_API_ID"))
api_hash = os.getenv("TELEGRAM_API_HASH")
session_string = os.getenv("TELEGRAM_SESSION_STRING", "")

if not session_string:
    print("‚ùå TELEGRAM_SESSION_STRING –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python generate_session.py")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Node.js API
NODE_API_URL = f"http://localhost:{os.getenv('NODE_PORT', 3001)}/api"

async def get_car_from_api(custom_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ Node.js API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{NODE_API_URL}/cars/{custom_id}") as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 404:
                    return None
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status} - {error_text}")
                    return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return None

async def download_image(url: str) -> BytesIO:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç BytesIO –æ–±—ä–µ–∫—Ç"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    image_data = await response.read()
                    return BytesIO(image_data)
                else:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url}")
                    return None
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
        return None

def format_car_message(car_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    message = f"üöó **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if car_data.get('brand') and car_data.get('model'):
        message += f"**{car_data['brand']} {car_data['model']}**"
        if car_data.get('year'):
            message += f" ({car_data['year']})"
        message += "\n\n"
    
    # –¶–µ–Ω–∞
    if car_data.get('price'):
        try:
            price = float(car_data['price'])
            message += f"üí∞ **–¶–µ–Ω–∞:** {price:,.0f} ‚ÇΩ\n\n"
        except:
            message += f"üí∞ **–¶–µ–Ω–∞:** {car_data['price']}\n\n"
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    if car_data.get('description'):
        # –£–±–∏—Ä–∞–µ–º ID –∏–∑ –Ω–∞—á–∞–ª–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
        description = car_data['description']
        if description.startswith('ID:'):
            lines = description.split('\n')
            description = '\n'.join(lines[1:]).strip()
        message += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{description}\n\n"
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += f"üÜî **ID:** {car_data.get('custom_id', 'N/A')}\n"
    
    if car_data.get('source_channel_name'):
        message += f"üì∫ **–ò—Å—Ç–æ—á–Ω–∏–∫:** {car_data['source_channel_name']}\n"
    
    if car_data.get('status'):
        status_emoji = {
            'available': '‚úÖ',
            'sold': '‚ùå', 
            'reserved': '‚è≥',
            'error': '‚ö†Ô∏è'
        }
        emoji = status_emoji.get(car_data['status'], '‚ùì')
        message += f"{emoji} **–°—Ç–∞—Ç—É—Å:** {car_data['status']}\n"
    
    if car_data.get('created_at'):
        message += f"üìÖ **–î–æ–±–∞–≤–ª–µ–Ω–æ:** {car_data['created_at'][:10]}\n"
    
    message += "\nüìû **–ö–æ–Ω—Ç–∞–∫—Ç:** @VroomMarketManager"
    
    return message

async def send_car_to_user(custom_id: str, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –õ–°"""
    print(f"üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å ID: {custom_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
    car_data = await get_car_from_api(custom_id)
    
    if not car_data:
        print(f"‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID {custom_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω: {car_data.get('brand', 'N/A')} {car_data.get('model', 'N/A')}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
    client = TelegramClient(StringSession(session_string), api_id, api_hash)
    
    try:
        await client.start()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_car_message(car_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photos = car_data.get('photos', [])
        
        if photos and len(photos) > 0:
            print(f"üì∏ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {len(photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo_files = []
            for i, photo_url in enumerate(photos[:10], 1):  # –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ
                print(f"  üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ {i}/{len(photos)}...")
                photo_data = await download_image(photo_url)
                if photo_data:
                    photo_files.append(photo_data)
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
                if i < len(photos) and len(photos) > 1:
                    await asyncio.sleep(0.5)
            
            if photo_files:
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å {len(photo_files)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
                try:
                    await client.send_file(
                        user_id, 
                        photo_files, 
                        caption=message
                    )
                except Exception as e:
                    if "wait" in str(e).lower() and "seconds" in str(e).lower():
                        print(f"‚ö†Ô∏è  Telegram —Ñ–ª—É–¥-–ª–∏–º–∏—Ç: {e}")
                        print("üì§ –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ...")
                        try:
                            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
                            await client.send_file(
                                user_id, 
                                photo_files[0], 
                                caption=f"{message}\n\n‚ö†Ô∏è –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram"
                            )
                        except:
                            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
                            await client.send_message(
                                user_id,
                                f"‚ö†Ô∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram\n\n{message}"
                            )
                    else:
                        raise e
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                await client.send_message(user_id, message)
        else:
            # –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            await client.send_message(user_id, message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        from telethon.tl.types import KeyboardButtonUrl
        from telethon.tl.types import ReplyInlineMarkup
        
        # –°–æ–∑–¥–∞–µ–º URL —Å pre-filled —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        pre_filled_text = f"–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ –∞–≤—Ç–æ –ø–æ–¥ ID {custom_id}"
        manager_url = f"https://t.me/VroomMarketManager?text={pre_filled_text.replace(' ', '%20')}"
        
        contact_button = KeyboardButtonUrl(
            text="üìû –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É",
            url=manager_url
        )
        
        keyboard = ReplyInlineMarkup([
            [contact_button]
        ])
        
        contact_message = (
            "üí¨ **–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ —ç—Ç–æ –∞–≤—Ç–æ?**\n\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ "
            "–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."
        )
        
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        await client.send_message(
            user_id,
            contact_message,
            buttons=keyboard
        )
        
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ {custom_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False
    finally:
        await client.disconnect()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 3:
        print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ!")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python get_auto.py <custom_id> <user_id>")
        print("–ü—Ä–∏–º–µ—Ä: python get_auto.py 12345678 987654321")
        sys.exit(1)
    
    custom_id = sys.argv[1]
    try:
        user_id = int(sys.argv[2])
    except ValueError:
        print("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        sys.exit(1)
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª–∏—Ç—ã get_auto")
    print(f"üÜî Custom ID: {custom_id}")
    print(f"üë§ User ID: {user_id}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Node.js API...")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{NODE_API_URL}/health") as response:
                if response.status == 200:
                    print("‚úÖ Node.js API –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print(f"‚ö†Ô∏è  Node.js API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
    except Exception as e:
        print(f"‚ùå Node.js API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: node app/db/server.js")
        sys.exit(1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    success = await send_car_to_user(custom_id, user_id)
    
    if success:
        print("\nüéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π!")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 