import requests
import json
import os
from typing import Dict, Any, Optional, List
from dataclasses import dataclass
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class CarData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    custom_id: str
    source_message_id: int
    source_channel_name: str
    brand: Optional[str] = None
    model: Optional[str] = None
    year: Optional[int] = None
    price: Optional[float] = None
    description: Optional[str] = None
    photos: Optional[List[str]] = None
    status: str = 'available'
    target_channel_message_id: Optional[int] = None

class DatabaseClient:
    """
    –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Node.js API
    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ù–ï –¢–†–û–ì–ê–ï–ú - –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ!
    """
    
    def __init__(self, base_url: str = "http://localhost:3001"):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'TelegramBot-StorageAPI/1.0'
        })
    
    def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API"""
        try:
            response = self.session.get(f"{self.base_url}/api/health", timeout=5)
            return response.status_code == 200
        except Exception as e:
            logger.error(f"Health check failed: {e}")
            return False
    
    def save_car(self, car_data: CarData) -> Optional[Dict[str, Any]]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            payload = {
                'custom_id': car_data.custom_id,
                'source_message_id': car_data.source_message_id,
                'source_channel_name': car_data.source_channel_name,
                'brand': car_data.brand,
                'model': car_data.model,
                'year': car_data.year,
                'price': car_data.price,
                'description': car_data.description,
                'photos': car_data.photos or [],
                'status': car_data.status,
                'target_channel_message_id': car_data.target_channel_message_id
            }
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {car_data.custom_id}")
            
            response = self.session.post(
                f"{self.base_url}/api/cars",
                json=payload,
                timeout=10
            )
            
            if response.status_code in [200, 201]:  # 200 OK –∏–ª–∏ 201 Created
                result = response.json()
                logger.info(f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {car_data.custom_id}")
                return result
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {car_data.custom_id}: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {car_data.custom_id}: {e}")
            return None
    
    def check_duplicate(self, source_message_id: int, source_channel_name: str) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–∞–Ω–∞–ª—É
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≤—Ç–æ –∏–ª–∏ None
        """
        try:
            url = f"{self.base_url}/api/cars/check-duplicate/{source_message_id}/{source_channel_name}"
            
            response = self.session.get(url, timeout=5)
            
            if response.status_code == 200:
                result = response.json()
                if result:
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: {result.get('custom_id')}")
                    return result
                else:
                    logger.info(f"üÜï –î—É–±–ª–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {source_message_id}")
                    return None
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞: {response.status_code}")
                return None
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–∞: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None (–∫–∞–∫ –±—É–¥—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–µ—Ç)
            return None
    
    def get_car(self, custom_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ custom_id"""
        try:
            response = self.session.get(f"{self.base_url}/api/cars/{custom_id}", timeout=5)
            
            if response.status_code == 200:
                return response.json()
            else:
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è {custom_id}: {e}")
            return None
    
    def get_all_cars(self, limit: int = 10, offset: int = 0) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            params = {'limit': limit, 'offset': offset}
            response = self.session.get(f"{self.base_url}/api/cars", params=params, timeout=10)
            
            if response.status_code == 200:
                return response.json()
            else:
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
_client = None

def get_client() -> DatabaseClient:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global _client
    if _client is None:
        _client = DatabaseClient()
    return _client

# –£–¥–∞–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è save_car_to_db - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –≤ legacy_wrapper

def check_car_duplicate(source_message_id: int, source_channel_name: str) -> Optional[Dict[str, Any]]:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    """
    try:
        client = get_client()
        return client.check_duplicate(source_message_id, source_channel_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_car_duplicate: {e}")
        return None 