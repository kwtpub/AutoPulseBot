#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Storage API
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from app.storage_api.database_client import get_client, check_car_duplicate
from app.storage_api.legacy_wrapper import send_car_to_node, check_duplicate_car, test_database_connection

def test_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
    
    client = get_client()
    is_healthy = client.health_check()
    
    if is_healthy:
        print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
    else:
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return False

def test_duplicate_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥—É–±–ª–∏–∫–∞—Ç
    result = check_car_duplicate(99999, "@test_channel")
    
    if result is None:
        print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ)")
    else:
        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –Ω–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: {result}")

def test_save_car():
    """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è...")
    
    test_car_data = {
        'custom_id': f'test-{os.getpid()}',  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        'source_message_id': 12345,
        'source_channel_name': '@test_channel',
        'brand': 'Test',
        'model': 'Car',
        'year': 2023,
        'price': 10000.0,
        'description': '–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Storage API',
        'photos': ['https://example.com/test.jpg'],
        'status': 'available'
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
    client = get_client()
    from app.storage_api.database_client import CarData
    
    car_data = CarData(
        custom_id=test_car_data['custom_id'],
        source_message_id=test_car_data['source_message_id'],
        source_channel_name=test_car_data['source_channel_name'],
        brand=test_car_data['brand'],
        model=test_car_data['model'],
        year=test_car_data['year'],
        price=test_car_data['price'],
        description=test_car_data['description'],
        photos=test_car_data['photos'],
        status=test_car_data['status']
    )
    
    result = client.save_car(car_data)
    
    if result:
        print("‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API!")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ legacy wrapper
    legacy_result = send_car_to_node(test_car_data)
    
    if 'message' in legacy_result and 'success' in legacy_result['message']:
        print("‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ legacy wrapper!")
    else:
        print(f"‚ö†Ô∏è Legacy wrapper —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {legacy_result}")

def test_get_car():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    print("\nüöó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è...")
    
    client = get_client()
    cars = client.get_all_cars(limit=1)
    
    if cars and 'cars' in cars and len(cars['cars']) > 0:
        car = cars['cars'][0]
        custom_id = car['custom_id']
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {custom_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        specific_car = client.get_car(custom_id)
        if specific_car:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {specific_car['brand']} {specific_car['model']}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å")
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –±–∞–∑–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Storage API\n")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not test_database_connection():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤.")
        return False
    
    # 2. Health check
    if not test_health_check():
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤.")
        return False
    
    # 3. –¢–µ—Å—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    test_duplicate_check()
    
    # 4. –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    test_save_car()
    
    # 5. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è
    test_get_car()
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    return True

if __name__ == "__main__":
    main() 