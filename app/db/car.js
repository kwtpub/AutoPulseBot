const { Pool } = require('pg');
require('dotenv').config({ path: require('path').resolve(__dirname, '../../.env') });

const connectionString = process.env.DATABASE_URL
  .replace(/([&?])(sslmode|channel_binding)=require&?/g, '$1')
  .replace(/[?&]$/, '');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
const pool = new Pool({
  connectionString,
  ssl: { rejectUnauthorized: false },
  max: 10, // –º–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
  idleTimeoutMillis: 30000, // –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  connectionTimeoutMillis: 2000, // —Ç–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—É–ª–∞
pool.on('error', (err) => {
  console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ PostgreSQL:', err);
});

async function createTableIfNotExists() {
  const client = await pool.connect();
  try {
    const createTableQuery = `
      CREATE TABLE IF NOT EXISTS cars (
        id SERIAL PRIMARY KEY,
        custom_id VARCHAR(255) UNIQUE NOT NULL,
        source_message_id INTEGER,
        source_channel_name VARCHAR(255),
        target_channel_message_id INTEGER,
        brand VARCHAR(255),
        model VARCHAR(255),
        year INTEGER,
        price DECIMAL(10,2),
        description TEXT,
        photos JSONB,
        status VARCHAR(50) DEFAULT 'available',
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );
      
      -- –ò–∑–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
      DO $$ 
      BEGIN
        -- –î–µ–ª–∞–µ–º year nullable –µ—Å–ª–∏ –æ–Ω –±—ã–ª NOT NULL
        BEGIN
          ALTER TABLE cars ALTER COLUMN year DROP NOT NULL;
        EXCEPTION 
          WHEN others THEN NULL;
        END;
        
        -- –î–µ–ª–∞–µ–º price nullable –µ—Å–ª–∏ –æ–Ω –±—ã–ª NOT NULL  
        BEGIN
          ALTER TABLE cars ALTER COLUMN price DROP NOT NULL;
        EXCEPTION 
          WHEN others THEN NULL;
        END;
      END $$;
    `;
    
    await client.query(createTableQuery);
    console.log('–¢–∞–±–ª–∏—Ü–∞ cars –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã cars:', err);
    throw err;
  } finally {
    client.release(); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
  }
}

async function addCar(car) {
  const client = await pool.connect();
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    await createTableIfNotExists();
    
    const query = `
      INSERT INTO cars (
        custom_id, source_message_id, source_channel_name, target_channel_message_id,
        brand, model, year, price, description, photos, status, created_at
      ) VALUES (
        $1, $2, $3, $4,
        $5, $6, $7, $8, $9, $10, $11, NOW()
      ) RETURNING *;
    `;
    const values = [
      car.custom_id,
      car.source_message_id,
      car.source_channel_name,
      car.target_channel_message_id || null,
      car.brand,
      car.model,
      car.year,
      car.price,
      car.description,
      JSON.stringify(car.photos || []),
      car.status || 'available',
    ];
    
    const res = await client.query(query, values);
    console.log('–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:', res.rows[0].custom_id);
    return res.rows[0];
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', err);
    throw err;
  } finally {
    client.release(); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ custom_id
async function getCar(custom_id) {
  const client = await pool.connect();
  try {
    const query = 'SELECT * FROM cars WHERE custom_id = $1';
    const result = await client.query(query, [custom_id]);
    
    if (result.rows.length === 0) {
      return null;
    }
    
    const car = result.rows[0];
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º JSON –ø–æ–ª–µ photos
    if (car.photos) {
      try {
        // –ï—Å–ª–∏ photos —É–∂–µ –æ–±—ä–µ–∫—Ç (JSONB), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (typeof car.photos === 'object') {
          // –£–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ PostgreSQL
        } else if (typeof car.photos === 'string') {
          // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å
          car.photos = JSON.parse(car.photos);
        }
      } catch (parseError) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ photos –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è', custom_id, ':', parseError.message);
        console.error('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ photos:', car.photos);
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        car.photos = [];
      }
    } else {
      car.photos = [];
    }
    
    return car;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', err);
    throw err;
  } finally {
    client.release();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async function getAllCars(limit = 10, offset = 0) {
  const client = await pool.connect();
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const carsQuery = `
      SELECT * FROM cars 
      ORDER BY created_at DESC 
      LIMIT $1 OFFSET $2
    `;
    const carsResult = await client.query(carsQuery, [limit, offset]);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const countQuery = 'SELECT COUNT(*) FROM cars';
    const countResult = await client.query(countQuery);
    
    const cars = carsResult.rows.map(car => {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º JSON –ø–æ–ª–µ photos
      if (car.photos) {
        try {
          // –ï—Å–ª–∏ photos —É–∂–µ –æ–±—ä–µ–∫—Ç (JSONB), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
          if (typeof car.photos === 'object') {
            // –£–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ PostgreSQL
          } else if (typeof car.photos === 'string') {
            // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å
            car.photos = JSON.parse(car.photos);
          }
        } catch (parseError) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ photos –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è', car.custom_id, ':', parseError.message);
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
          car.photos = [];
        }
      } else {
        car.photos = [];
      }
      return car;
    });
    
    return {
      cars,
      total: parseInt(countResult.rows[0].count)
    };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', err);
    throw err;
  } finally {
    client.release();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function checkConnection() {
  const client = await pool.connect();
  try {
    const result = await client.query('SELECT NOW()');
    console.log('PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ:', result.rows[0].now);
    return true;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err);
    return false;
  } finally {
    client.release();
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  (async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await checkConnection();
    
    const newCar = {
      custom_id: 'car-123',
      source_message_id: 456,
      source_channel_name: '@importdrive',
      target_channel_message_id: null,
      brand: 'Toyota',
      model: 'Camry',
      year: 2020,
      price: 20000,
      description: '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü.',
      photos: ['https://example.com/photo1.jpg'],
      status: 'available',
    };
    try {
      const car = await addCar(newCar);
      console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ:', car);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ:', err);
    }
  })();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ source_message_id –∏ source_channel_name
async function checkDuplicate(source_message_id, source_channel_name) {
  let client;
  try {
    client = await pool.connect();
    const query = `
      SELECT custom_id, brand, model, year, created_at 
      FROM cars 
      WHERE source_message_id = $1 AND source_channel_name = $2
    `;
    const result = await client.query(query, [source_message_id, source_channel_name]);
    
    if (result.rows.length > 0) {
      const existingCar = result.rows[0];
      console.log(`üîç –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: ${existingCar.custom_id} (${existingCar.brand} ${existingCar.model} ${existingCar.year})`);
      return existingCar;
    }
    
    return null;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', err);
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null (–∫–∞–∫ –±—É–¥—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–µ—Ç)
    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ë–î
    return null;
  } finally {
    if (client) {
      client.release();
    }
  }
}

module.exports = { 
  saveCar: addCar, 
  checkConnection, 
  getCar, 
  getAllCars,
  checkDuplicate
}; 