/**
 * Database Pool Manager - —É–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ —Å PostgreSQL
 * –í–∫–ª—é—á–∞–µ—Ç retry –ª–æ–≥–∏–∫—É, graceful recovery –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */

const { Pool } = require('pg');
require('dotenv').config({ path: require('path').resolve(__dirname, '../../.env') });

class DatabasePool {
  constructor() {
    this.pool = null;
    this.isConnecting = false;
    this.retryCount = 0;
    this.maxRetries = 5;
    this.retryDelay = 1000; // –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º—Å
    this.initialized = false;
    
    this.createPool();
  }

  createPool() {
    if (this.pool) {
      this.pool.end();
    }

    const connectionString = process.env.DATABASE_URL
      .replace(/([&?])(sslmode|channel_binding)=require&?/g, '$1')
      .replace(/[?&]$/, '');

    this.pool = new Pool({
      connectionString,
      ssl: { rejectUnauthorized: false },
      
      // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      max: 20, // –±–æ–ª—å—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
      idleTimeoutMillis: 60000, // 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è idle —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      connectionTimeoutMillis: 10000, // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      acquireTimeoutMillis: 15000, // 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      keepAlive: true,
      keepAliveInitialDelayMillis: 10000,
      allowExitOnIdle: false
    });

    this.setupEventHandlers();
  }

  setupEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—É–ª–∞
    this.pool.on('error', (err) => {
      console.error('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ PostgreSQL pool:', err.message);
      this.handlePoolError(err);
    });

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    this.pool.on('connect', (client) => {
      console.log('üü¢ –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      this.retryCount = 0; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    });

    this.pool.on('acquire', () => {
      console.log('üîµ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –ø—É–ª–∞');
    });

    this.pool.on('remove', () => {
      console.log('üü° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ø—É–ª–∞');
    });
  }

  async handlePoolError(err) {
    console.error(`üî¥ –û—à–∏–±–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–ø–æ–ø—ã—Ç–∫–∞ ${this.retryCount + 1}/${this.maxRetries}):`, err.message);
    
    if (this.retryCount < this.maxRetries && !this.isConnecting) {
      this.isConnecting = true;
      this.retryCount++;
      
      const delay = this.retryDelay * Math.pow(2, this.retryCount - 1); // —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${delay}–º—Å...`);
      
      setTimeout(() => {
        this.createPool();
        this.isConnecting = false;
      }, delay);
    } else {
      console.error('üî¥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    }
  }

  async getConnection() {
    let attempt = 0;
    const maxAttempts = 3;
    
    while (attempt < maxAttempts) {
      try {
        const client = await this.pool.connect();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await client.query('SELECT 1');
        
        return client;
      } catch (err) {
        attempt++;
        console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ${attempt}/${maxAttempts} –Ω–µ—É–¥–∞—á–Ω–∞:`, err.message);
        
        if (attempt >= maxAttempts) {
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫: ${err.message}`);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
  }

  async executeQuery(queryText, params = []) {
    let client;
    let attempt = 0;
    const maxAttempts = 3;
    
    while (attempt < maxAttempts) {
      try {
        client = await this.getConnection();
        const result = await client.query(queryText, params);
        return result;
      } catch (err) {
        attempt++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts}):`, err.message);
        
        if (client) {
          client.release();
          client = null;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—É–ª
        if (err.message.includes('Connection terminated') || 
            err.message.includes('connection timeout') ||
            err.code === 'ENOTFOUND' ||
            err.code === 'ETIMEDOUT') {
          
          console.log('üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
          this.createPool();
          await new Promise(resolve => setTimeout(resolve, 2000)); // –∂–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        }
        
        if (attempt >= maxAttempts) {
          throw err;
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
      } finally {
        if (client) {
          client.release();
        }
      }
    }
  }

  async checkConnection() {
    try {
      await this.executeQuery('SELECT NOW() as current_time');
      console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ');
      return true;
    } catch (err) {
      console.error('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', err.message);
      return false;
    }
  }

  async close() {
    if (this.pool) {
      console.log('üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');
      await this.pool.end();
      this.pool = null;
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞
  getPoolStats() {
    if (!this.pool) return null;
    
    return {
      totalCount: this.pool.totalCount,
      idleCount: this.pool.idleCount,
      waitingCount: this.pool.waitingCount,
      retryCount: this.retryCount,
      isConnecting: this.isConnecting
    };
  }
}

// –°–æ–∑–¥–∞–µ–º singleton instance
const dbPool = new DatabasePool();

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');
  await dbPool.close();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');
  await dbPool.close();
  process.exit(0);
});

module.exports = dbPool; 