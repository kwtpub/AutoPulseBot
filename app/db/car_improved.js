/**
 * Car Database Operations - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å retry –ª–æ–≥–∏–∫–æ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π DatabasePool –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
 */

const dbPool = require('./database_pool');

async function createTableIfNotExists() {
  console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã cars...');
  
  const createTableQuery = `
    CREATE TABLE IF NOT EXISTS cars (
      id SERIAL PRIMARY KEY,
      custom_id VARCHAR(255) UNIQUE NOT NULL,
      source_message_id INTEGER,
      source_channel_name VARCHAR(255),
      target_channel_message_id INTEGER,
      brand VARCHAR(255),
      model VARCHAR(255),
      year INTEGER,
      price DECIMAL(10,2),
      description TEXT,
      photos JSONB,
      status VARCHAR(50) DEFAULT 'available',
      created_at TIMESTAMP DEFAULT NOW(),
      updated_at TIMESTAMP DEFAULT NOW()
    );
    
    -- –ò–∑–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
    DO $$ 
    BEGIN
      -- –î–µ–ª–∞–µ–º year nullable –µ—Å–ª–∏ –æ–Ω –±—ã–ª NOT NULL
      BEGIN
        ALTER TABLE cars ALTER COLUMN year DROP NOT NULL;
      EXCEPTION 
        WHEN others THEN NULL;
      END;
      
      -- –î–µ–ª–∞–µ–º price nullable –µ—Å–ª–∏ –æ–Ω –±—ã–ª NOT NULL  
      BEGIN
        ALTER TABLE cars ALTER COLUMN price DROP NOT NULL;
      EXCEPTION 
        WHEN others THEN NULL;
      END;
    END $$;
  `;
  
  try {
    await dbPool.executeQuery(createTableQuery);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ cars –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã cars:', err.message);
    throw err;
  }
}

async function addCar(car) {
  console.log(`üöó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å ID: ${car.custom_id}`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    await createTableIfNotExists();
    
    const query = `
      INSERT INTO cars (
        custom_id, source_message_id, source_channel_name, target_channel_message_id,
        brand, model, year, price, description, photos, status, created_at
      ) VALUES (
        $1, $2, $3, $4,
        $5, $6, $7, $8, $9, $10, $11, NOW()
      ) RETURNING *;
    `;
    
    const values = [
      car.custom_id,
      car.source_message_id,
      car.source_channel_name,
      car.target_channel_message_id || null,
      car.brand,
      car.model,
      car.year,
      car.price,
      car.description,
      JSON.stringify(car.photos || []),
      car.status || 'available',
    ];
    
    const result = await dbPool.executeQuery(query, values);
    console.log('‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:', result.rows[0].custom_id);
    return result.rows[0];
    
  } catch (err) {
    if (err.code === '23505') {
      console.warn(`‚ö†Ô∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID ${car.custom_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      throw new Error(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID ${car.custom_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    }
    
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', err.message);
    throw err;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ custom_id
async function getCar(custom_id) {
  console.log(`üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å ID: ${custom_id}`);
  
  try {
    const query = 'SELECT * FROM cars WHERE custom_id = $1';
    const result = await dbPool.executeQuery(query, [custom_id]);
    
    if (result.rows.length === 0) {
      console.log(`‚ÑπÔ∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID ${custom_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return null;
    }
    
    const car = result.rows[0];
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º JSON –ø–æ–ª–µ photos
    if (car.photos) {
      try {
        // –ï—Å–ª–∏ photos —É–∂–µ –æ–±—ä–µ–∫—Ç (JSONB), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (typeof car.photos === 'object') {
          // –£–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ PostgreSQL
        } else if (typeof car.photos === 'string') {
          // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å
          car.photos = JSON.parse(car.photos);
        }
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ photos –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è', custom_id, ':', parseError.message);
        console.error('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ photos:', car.photos);
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        car.photos = [];
      }
    } else {
      car.photos = [];
    }
    
    console.log(`‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω: ${car.brand} ${car.model}`);
    return car;
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', err.message);
    throw err;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async function getAllCars(limit = 10, offset = 0) {
  console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (limit: ${limit}, offset: ${offset})`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const carsQuery = `
      SELECT * FROM cars 
      ORDER BY created_at DESC 
      LIMIT $1 OFFSET $2
    `;
    const carsResult = await dbPool.executeQuery(carsQuery, [limit, offset]);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const countQuery = 'SELECT COUNT(*) FROM cars';
    const countResult = await dbPool.executeQuery(countQuery);
    
    const cars = carsResult.rows.map(car => {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º JSON –ø–æ–ª–µ photos
      if (car.photos) {
        try {
          // –ï—Å–ª–∏ photos —É–∂–µ –æ–±—ä–µ–∫—Ç (JSONB), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
          if (typeof car.photos === 'object') {
            // –£–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ PostgreSQL
          } else if (typeof car.photos === 'string') {
            // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å
            car.photos = JSON.parse(car.photos);
          }
        } catch (parseError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ photos –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è', car.custom_id, ':', parseError.message);
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
          car.photos = [];
        }
      } else {
        car.photos = [];
      }
      return car;
    });
    
    const total = parseInt(countResult.rows[0].count);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${cars.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ ${total} –æ–±—â–∏—Ö`);
    
    return {
      cars,
      total
    };
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', err.message);
    throw err;
  }
}

async function checkConnection() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const connected = await dbPool.checkConnection();
    
    if (connected) {
      console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞
      const stats = dbPool.getPoolStats();
      if (stats) {
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞: active=${stats.totalCount}, idle=${stats.idleCount}, waiting=${stats.waitingCount}`);
      }
    }
    
    return connected;
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err.message);
    return false;
  }
}

async function checkDuplicate(source_message_id, source_channel_name) {
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞: message_id=${source_message_id}, channel=${source_channel_name}`);
  
  try {
    const query = `
      SELECT * FROM cars 
      WHERE source_message_id = $1 AND source_channel_name = $2 
      LIMIT 1
    `;
    
    const result = await dbPool.executeQuery(query, [source_message_id, source_channel_name]);
    
    if (result.rows.length > 0) {
      const duplicate = result.rows[0];
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: –∞–≤—Ç–æ–º–æ–±–∏–ª—å ${duplicate.custom_id}`);
      return duplicate;
    }
    
    console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return null;
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–∞:', err.message);
    throw err;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function updateCar(custom_id, updates) {
  console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${custom_id}`);
  
  try {
    // –°—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateFields = [];
    const values = [];
    let paramIndex = 1;
    
    for (const [key, value] of Object.entries(updates)) {
      if (key === 'photos' && value) {
        updateFields.push(`${key} = $${paramIndex}`);
        values.push(JSON.stringify(value));
      } else if (value !== undefined) {
        updateFields.push(`${key} = $${paramIndex}`);
        values.push(value);
      }
      paramIndex++;
    }
    
    if (updateFields.length === 0) {
      throw new Error('–ù–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }
    
    updateFields.push(`updated_at = NOW()`);
    values.push(custom_id);
    
    const query = `
      UPDATE cars 
      SET ${updateFields.join(', ')}
      WHERE custom_id = $${paramIndex}
      RETURNING *;
    `;
    
    const result = await dbPool.executeQuery(query, values);
    
    if (result.rows.length === 0) {
      throw new Error(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID ${custom_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    console.log('‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    return result.rows[0];
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', err.message);
    throw err;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function deleteCar(custom_id) {
  console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${custom_id}`);
  
  try {
    const query = 'DELETE FROM cars WHERE custom_id = $1 RETURNING *';
    const result = await dbPool.executeQuery(query, [custom_id]);
    
    if (result.rows.length === 0) {
      throw new Error(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID ${custom_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    console.log('‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    return result.rows[0];
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', err.message);
    throw err;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API)
module.exports = {
  addCar,
  saveCar: addCar, // alias –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  getCar,
  getAllCars,
  checkConnection,
  checkDuplicate,
  updateCar,
  deleteCar,
  createTableIfNotExists
}; 