"""
–ö–æ–º–∞–Ω–¥–∞ /getauto –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ custom_id
"""
import asyncio
import aiohttp
import logging
import os
from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logger = logging.getLogger(__name__)
NODE_API_URL = f"http://localhost:{os.getenv('NODE_PORT', 3001)}/api"

async def get_car_from_api(custom_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ Node.js API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{NODE_API_URL}/cars/{custom_id}") as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 404:
                    return None
                else:
                    return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return None

async def download_image(url: str) -> BytesIO:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç BytesIO –æ–±—ä–µ–∫—Ç"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    image_data = await response.read()
                    return BytesIO(image_data)
                else:
                    return None
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
        return None

def format_car_message(car_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    message = f"üöó **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if car_data.get('brand') and car_data.get('model'):
        message += f"**{car_data['brand']} {car_data['model']}**"
        if car_data.get('year'):
            message += f" ({car_data['year']})"
        message += "\n\n"
    
    # –¶–µ–Ω–∞
    if car_data.get('price'):
        try:
            price = float(car_data['price'])
            message += f"üí∞ **–¶–µ–Ω–∞:** {price:,.0f} ‚ÇΩ\n\n"
        except:
            message += f"üí∞ **–¶–µ–Ω–∞:** {car_data['price']}\n\n"
    
    # –û–ø–∏—Å–∞–Ω–∏–µ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ)
    if car_data.get('description'):
        # –£–±–∏—Ä–∞–µ–º ID –∏–∑ –Ω–∞—á–∞–ª–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
        description = car_data['description']
        if description.startswith('ID:'):
            lines = description.split('\n')
            description = '\n'.join(lines[1:]).strip()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è Telegram caption
        if len(description) > 300:
            description = description[:300] + "..."
        
        message += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{description}\n\n"
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += f"üÜî **ID:** {car_data.get('custom_id', 'N/A')}\n"
    
    if car_data.get('source_channel_name'):
        message += f"üì∫ **–ò—Å—Ç–æ—á–Ω–∏–∫:** {car_data['source_channel_name']}\n"
    
    if car_data.get('status'):
        status_emoji = {
            'available': '‚úÖ',
            'sold': '‚ùå', 
            'reserved': '‚è≥',
            'error': '‚ö†Ô∏è'
        }
        emoji = status_emoji.get(car_data['status'], '‚ùì')
        message += f"{emoji} **–°—Ç–∞—Ç—É—Å:** {car_data['status']}\n"
    
    if car_data.get('created_at'):
        message += f"üìÖ **–î–æ–±–∞–≤–ª–µ–Ω–æ:** {car_data['created_at'][:10]}\n"
    
    message += "\nüìû **–ö–æ–Ω—Ç–∞–∫—Ç:** @VroomMarketManager"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram caption (–ª–∏–º–∏—Ç 1024 —Å–∏–º–≤–æ–ª–∞)
    if len(message) > 1000:
        message = message[:950] + "...\n\nüìû **–ö–æ–Ω—Ç–∞–∫—Ç:** @VroomMarketManager"
    
    return message

async def getauto_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getauto"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!**\n\n"
            "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** /getauto <custom_id>\n"
            "**–ü—Ä–∏–º–µ—Ä:** /getauto 023-455\n\n"
            "–ì–¥–µ custom_id - —ç—Ç–æ ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
            parse_mode='Markdown'
        )
        return
    
    custom_id = context.args[0]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
    loading_message = await update.message.reply_text(
        f"üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å ID: `{custom_id}`...",
        parse_mode='Markdown'
    )
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
        await loading_message.edit_text(
            f"üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å ID: `{custom_id}`...\n"
            f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...",
            parse_mode='Markdown'
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        car_data = await get_car_from_api(custom_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await loading_message.edit_text(
            f"üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å ID: `{custom_id}`...\n"
            f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã\n"
            f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...",
            parse_mode='Markdown'
        )
        
        if not car_data:
            await loading_message.edit_text(
                f"‚ùå **–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
                f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID `{custom_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                parse_mode='Markdown'
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_car_message(car_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photos = car_data.get('photos', [])
        
        if photos and len(photos) > 0:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
            await loading_message.edit_text(
                f"üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å ID: `{custom_id}`...\n"
                f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã\n"
                f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞\n"
                f"üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π ({len(photos)} —à—Ç.)...",
                parse_mode='Markdown'
            )
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo_files = []
            for i, photo_url in enumerate(photos[:10]):  # –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ
                photo_data = await download_image(photo_url)
                if photo_data:
                    photo_files.append(photo_data)
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
                if i < len(photos) - 1 and len(photos) > 1:
                    await asyncio.sleep(0.3)
            
            if photo_files:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                await loading_message.edit_text(
                    f"üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å ID: `{custom_id}`...\n"
                    f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã\n"
                    f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞\n"
                    f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({len(photo_files)} —à—Ç.)\n"
                    f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...",
                    parse_mode='Markdown'
                )
                
                try:
                    if len(photo_files) == 1:
                        # –û–¥–Ω–æ —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–¥–ø–∏—Å—å—é
                        await update.message.reply_photo(
                            photo=photo_files[0],
                            caption=message,
                            parse_mode='Markdown'
                        )
                        
                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                        await loading_message.delete()
                    else:
                        # –ú–Ω–æ–≥–æ —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É —Å –ø–æ–¥–ø–∏—Å—å—é –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
                        from telegram import InputMediaPhoto as TelegramInputMediaPhoto
                        
                        media_group = []
                        for i, photo_file in enumerate(photo_files):
                            if i == 0:
                                # –ö –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
                                media_group.append(TelegramInputMediaPhoto(photo_file, caption=message, parse_mode='Markdown'))
                            else:
                                media_group.append(TelegramInputMediaPhoto(photo_file))
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
                        await context.bot.send_media_group(
                            chat_id=update.effective_chat.id,
                            media=media_group
                        )
                        
                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                        await loading_message.delete()
                except Exception as e:
                    if "flood" in str(e).lower() or "too many requests" in str(e).lower():
                        logger.warning(f"Telegram —Ñ–ª—É–¥-–ª–∏–º–∏—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                        try:
                            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
                            await update.message.reply_photo(
                                photo=photo_files[0],
                                caption=f"{message}\n\n‚ö†Ô∏è –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram",
                                parse_mode='Markdown'
                            )
                        except:
                            await update.message.reply_text(
                                f"‚ö†Ô∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram\n\n{message}",
                                parse_mode='Markdown'
                            )
                    else:
                        raise e
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await update.message.reply_text(
                    f"‚ö†Ô∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\n{message}",
                    parse_mode='Markdown'
                )
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ —Ñ–æ—Ç–æ
            await loading_message.edit_text(
                f"üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å ID: `{custom_id}`...\n"
                f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã\n"
                f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞\n"
                f"‚ö†Ô∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...",
                parse_mode='Markdown'
            )
            
            # –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await update.message.reply_text(
                message,
                parse_mode='Markdown'
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            await loading_message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        contact_message = (
            f"üí¨ **–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ —ç—Ç–æ –∞–≤—Ç–æ?**\n\n"
            f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ "
            f"–∏ –∑–∞–∫–∞–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."
        )
        
        # –°–æ–∑–¥–∞–µ–º URL —Å pre-filled —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        pre_filled_text = f"–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ –∞–≤—Ç–æ –ø–æ–¥ ID {custom_id}"
        manager_url = f"https://t.me/VroomMarketManager?text={pre_filled_text.replace(' ', '%20')}"
        
        keyboard = [[InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=manager_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            contact_message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ getauto: {e}")
        await loading_message.edit_text(
            "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode='Markdown'
        ) 