# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from app.utils.config import set_pricing_config
from app.utils.announcement_processor import process_single_announcement
from app.utils.channel_parser import fetch_announcements_from_channel
import asyncio

# –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–∑ main.py –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ context.application.bot_data
# ADMIN_USER_IDS, MARKUP_PERCENTAGE, SOURCE_CHANNELS, perplexity_processor

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
SET_MARKUP, PARSER_CHANNEL, PARSER_COUNT = range(3)

async def get_admin_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É %", callback_data='admin_set_markup')],
        [InlineKeyboardButton("üì° –ö–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data='admin_source_channels')],
        [InlineKeyboardButton("üîç –ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤", callback_data='admin_parser')],
    ])

async def get_back_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_back_to_main')]
    ])

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ADMIN_USER_IDS = context.application.bot_data['ADMIN_USER_IDS']
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END
    
    reply_markup = await get_admin_keyboard()
    message = await update.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
    context.user_data['admin_message_id'] = message.message_id
    return ConversationHandler.END

async def admin_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ADMIN_USER_IDS = context.application.bot_data['ADMIN_USER_IDS']
    MARKUP_PERCENTAGE = context.application.bot_data['MARKUP_PERCENTAGE']
    SOURCE_CHANNELS = context.application.bot_data['SOURCE_CHANNELS']
    query = update.callback_query
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data['admin_message_id'] = query.message.message_id
    
    user_id = query.from_user.id
    if user_id not in ADMIN_USER_IDS:
        await query.answer(show_alert=True, text="‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END
    
    if query.data == 'admin_stats':
        await query.answer()
        await query.edit_message_text(
            text="üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)",
            parse_mode='Markdown',
            reply_markup=await get_admin_keyboard()
        )
        return ConversationHandler.END
        
    elif query.data == 'admin_set_markup':
        await query.answer()
        await query.edit_message_text(
            text=f"üí∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—Ü–µ–Ω–∫–∏**\n\n–¢–µ–∫—É—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: **{MARKUP_PERCENTAGE}%**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –∏–ª–∏ 12.5):",
            parse_mode='Markdown'
        )
        return SET_MARKUP
        
    elif query.data == 'admin_source_channels':
        await query.answer()
        if not SOURCE_CHANNELS:
            text = "üì° **–ö–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏**\n\n–ö–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã.\n\n(–ó–∞–¥–∞—é—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `TELEGRAM_CHANNEL`)"
        else:
            channels_list_str = "\n".join([f"‚Ä¢ `{ch}`" for ch in SOURCE_CHANNELS])
            text = f"üì° **–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏:**\n\n{channels_list_str}\n\n(–ó–∞–¥–∞—é—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `TELEGRAM_CHANNEL`)"
        await query.edit_message_text(
            text=text,
            reply_markup=await get_back_keyboard(),
            parse_mode='Markdown'
        )
        return ConversationHandler.END
        
    elif query.data == 'admin_parser':
        await query.answer()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard = []
        if SOURCE_CHANNELS:
            for channel in SOURCE_CHANNELS:
                # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                display_name = channel.lstrip('@')
                keyboard.append([InlineKeyboardButton(f"üì° {display_name}", callback_data=f'parser_select_{channel}')])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∫–∞–Ω–∞–ª –≤—Ä—É—á–Ω—É—é", callback_data='parser_manual')])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_back_to_main')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        channels_text = ""
        if SOURCE_CHANNELS:
            channels_text = "\n\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:**\n" + "\n".join([f"‚Ä¢ `{ch}`" for ch in SOURCE_CHANNELS])
        
        await query.edit_message_text(
            text=f"üîç **–ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:{channels_text}",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        return ConversationHandler.END
        
    elif query.data.startswith('parser_select_'):
        await query.answer()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
        selected_channel = query.data.replace('parser_select_', '')
        context.user_data['parser_channel'] = selected_channel
        
        await query.edit_message_text(
            text=f"üîç **–ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤**\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª: `{selected_channel}`\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100):",
            parse_mode='Markdown',
            reply_markup=await get_back_keyboard()
        )
        return PARSER_COUNT
        
    elif query.data == 'parser_manual':
        await query.answer()
        await query.edit_message_text(
            text="üîç **–ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤**\n\n–í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @milkos44556):",
            parse_mode='Markdown',
            reply_markup=await get_back_keyboard()
        )
        return PARSER_CHANNEL
        
    elif query.data == 'admin_back_to_main':
        await query.answer()
        await query.edit_message_text(
            text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=await get_admin_keyboard()
        )
        return ConversationHandler.END

async def handle_set_markup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    MARKUP_PERCENTAGE = context.application.bot_data['MARKUP_PERCENTAGE']
    admin_message_id = context.user_data.get('admin_message_id')
    chat_id = update.effective_chat.id
    await update.message.delete()
    if not admin_message_id:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ /admin —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    reply_markup = await get_admin_keyboard()
    try:
        new_markup = float(update.message.text)
        if new_markup < 0 or new_markup > 100:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=admin_message_id,
                text="‚ùå –ù–∞—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=reply_markup
            )
            return SET_MARKUP
        context.application.bot_data['MARKUP_PERCENTAGE'] = new_markup
        set_pricing_config(new_markup)
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=admin_message_id,
            text=f"‚úÖ –ù–∞—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: **{new_markup}%**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    except ValueError:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=admin_message_id,
            text="‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 12.5):",
            reply_markup=reply_markup
        )
        return SET_MARKUP
    return ConversationHandler.END

async def handle_parser_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_message_id = context.user_data.get('admin_message_id')
    chat_id = update.effective_chat.id
    await update.message.delete()
    if not admin_message_id:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ /admin —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    channel = update.message.text.strip()
    if not channel.startswith('@') and not channel.startswith('https://t.me/'):
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=admin_message_id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ https://t.me/username\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await get_back_keyboard()
        )
        return PARSER_CHANNEL
    context.user_data['parser_channel'] = channel
    await context.bot.edit_message_text(
        chat_id=chat_id,
        message_id=admin_message_id,
        text=f"üîç **–ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤**\n\n–ö–∞–Ω–∞–ª: `{channel}`\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100):",
        parse_mode='Markdown',
        reply_markup=await get_back_keyboard()
    )
    return PARSER_COUNT

async def handle_parser_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_message_id = context.user_data.get('admin_message_id')
    chat_id = update.effective_chat.id
    await update.message.delete()
    if not admin_message_id:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ /admin —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    try:
        count = int(update.message.text)
        if count <= 0 or count > 1000:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=admin_message_id,
                text="‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=await get_back_keyboard()
            )
            return PARSER_COUNT
    except ValueError:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=admin_message_id,
            text="‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await get_back_keyboard()
        )
        return PARSER_COUNT
    channel = context.user_data.get('parser_channel')
    await context.bot.edit_message_text(
        chat_id=chat_id,
        message_id=admin_message_id,
        text=f"üîç **–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...**\n\n–ö–∞–Ω–∞–ª: `{channel}`\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...",
        parse_mode='Markdown',
        reply_markup=await get_back_keyboard()
    )
    try:
        asyncio.create_task(run_parser_task(context, channel, count, admin_message_id, chat_id))
    except Exception as e:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=admin_message_id,
            text=f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:**\n\n{str(e)}",
            parse_mode='Markdown',
            reply_markup=await get_admin_keyboard()
        )
    return ConversationHandler.END

async def run_parser_task(context, channel, count, message_id, chat_id):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—è –µ–¥–∏–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–∑ pipeline.py"""
    perplexity_processor = context.application.bot_data['perplexity_processor']
    MARKUP_PERCENTAGE = context.application.bot_data['MARKUP_PERCENTAGE']
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
        announcements = await fetch_announcements_from_channel(channel, limit=count)
        
        if not announcements:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞**\n\n–ö–∞–Ω–∞–ª: `{channel}`\n–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: 0\n\n‚ÑπÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                parse_mode='Markdown',
                reply_markup=await get_admin_keyboard()
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processed_count = 0
        error_count = 0
        
        for i, announcement in enumerate(announcements, 1):
            print(f"\n--- –ê–¥–º–∏–Ω-–ø–∞—Ä—Å–∏–Ω–≥: –û–±—Ä–∞–±–æ—Ç–∫–∞ {i}/{len(announcements)} ---")
            try:
                await process_single_announcement(
                    ann=announcement,
                    perplexity_processor=perplexity_processor,
                    source_channel=channel,
                    markup_percentage=MARKUP_PERCENTAGE
                )
                processed_count += 1
            except Exception as e:
                error_count += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {announcement.get('id', 'unknown')}: {e}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            await asyncio.sleep(0.5)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        status_icon = "‚úÖ" if error_count == 0 else "‚ö†Ô∏è"
        result_text = f"{status_icon} **–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
        result_text += f"–ö–∞–Ω–∞–ª: `{channel}`\n"
        result_text += f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(announcements)}\n"
        result_text += f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {processed_count}\n"
        
        if error_count > 0:
            result_text += f"–û—à–∏–±–æ–∫: {error_count}\n"
        
        result_text += f"\nüöó –û–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥."
        
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=result_text,
            parse_mode='Markdown',
            reply_markup=await get_admin_keyboard()
        )
        
    except Exception as e:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:**\n\n{str(e)}",
            parse_mode='Markdown',
            reply_markup=await get_admin_keyboard()
        )

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ADMIN_USER_IDS = context.application.bot_data['ADMIN_USER_IDS']
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def register_admin_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    
    # ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    admin_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("admin", admin_panel),
            CallbackQueryHandler(admin_callbacks, pattern="^admin_"),
            CallbackQueryHandler(admin_callbacks, pattern="^parser_")
        ],
        states={
            SET_MARKUP: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_set_markup),
                CallbackQueryHandler(admin_callbacks, pattern="^admin_"),
                CallbackQueryHandler(admin_callbacks, pattern="^parser_")
            ],
            PARSER_CHANNEL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_parser_channel),
                CallbackQueryHandler(admin_callbacks, pattern="^admin_"),
                CallbackQueryHandler(admin_callbacks, pattern="^parser_")
            ],
            PARSER_COUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_parser_count),
                CallbackQueryHandler(admin_callbacks, pattern="^admin_"),
                CallbackQueryHandler(admin_callbacks, pattern="^parser_")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
        allow_reentry=True,
        per_chat=False
    )
    
    application.add_handler(admin_conv_handler) 