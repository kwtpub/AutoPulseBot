import os
import asyncio
from dotenv import load_dotenv
from app.utils.channel_parser import fetch_announcements_from_channel
from app.ocr_api.legacy_wrapper import OCRProcessor
from app.perplexity_api.legacy_wrapper import PerplexityProcessor
from app.cloudinary_api.legacy_wrapper import upload_image_to_cloudinary, get_image_url_from_cloudinary
from app.utils.message_formatter import MessageFormatter
from app.core.telegram import send_message_to_channel, send_message_with_photos_to_channel
from app.utils.config import get_telegram_config, get_pricing_config
from app.utils.id_generator import generate_custom_id, format_id_for_display
import sys
import shutil
import random
from app.storage_api.legacy_wrapper import save_car_with_formatting
import re


def format_perplexity_response_with_quotes(response_text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Perplexity –æ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ Markdown –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    Args:
        response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Perplexity
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ —Å blockquote –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–µ–∫—Ü–∏–π
    """
    if not response_text:
        return response_text
    
    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ Markdown –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    cleaned_text = response_text
    
    # –£–±–∏—Ä–∞–µ–º ** –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å)
    cleaned_text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', cleaned_text)
    
    # –£–±–∏—Ä–∞–µ–º * –¥–ª—è –∫—É—Ä—Å–∏–≤–∞ (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å)
    cleaned_text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', cleaned_text)
    
    # –£–±–∏—Ä–∞–µ–º - –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ (markdown —Å–ø–∏—Å–∫–∏)
    cleaned_text = re.sub(r'^- ', '', cleaned_text, flags=re.MULTILINE)
    
    # –°–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ blockquote
    sections_to_quote = [
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        r'(üõ†[Ô∏è]?\s*(?:\*\*)?(?:<b>)?(?:–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏|Technical specifications)(?:</b>)?(?:\*\*)?[:\s]*)\n((?:(?!üõ°|üì±|üìä|‚öôÔ∏è|Custom ID|#).+\n?)*)',
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Å —ç–º–æ–¥–∑–∏ ‚öôÔ∏è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω)
        r'(‚öôÔ∏è.*?–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.*?)\n(.*?)(?=\n*#)',
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Å —ç–º–æ–¥–∑–∏ üìä
        r'(üìä\s*(?:\*\*)?(?:<b>)?(?:–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏|Additional details)(?:</b>)?(?:\*\*)?[:\s]*)\n((?:(?!üõ†|üõ°|üì±|‚öôÔ∏è|Custom ID|#).+\n?)*)',
        # –°–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        r'(üõ°[Ô∏è]?\s*(?:\*\*)?(?:<b>)?(?:–°–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏|Safety systems|–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã)(?:</b>)?(?:\*\*)?[:\s]*)\n((?:(?!üõ†|üì±|üìä|‚öôÔ∏è|Custom ID|#).+\n?)*)',
        # –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞
        r'(üì±\s*(?:\*\*)?(?:<b>)?(?:–ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞|Multimedia)(?:</b>)?(?:\*\*)?[:\s]*)\n((?:(?!üõ†|üõ°|üìä|‚öôÔ∏è|Custom ID|#).+\n?)*)',
        # –£—Å–ª–æ–≤–∏—è –ø—Ä–æ–¥–∞–∂–∏
        r'(üì¶\s*(?:\*\*)?(?:<b>)?(?:–£—Å–ª–æ–≤–∏—è –ø—Ä–æ–¥–∞–∂–∏|Sales terms)(?:</b>)?(?:\*\*)?[:\s]*)\n((?:(?!üõ†|üõ°|üì±|üìä|‚öôÔ∏è|Custom ID|#).+\n?)*)'
    ]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º blockquote —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
    for pattern in sections_to_quote:
        def replace_with_blockquote(match):
            header = match.group(1).strip()
            content = match.group(2).strip()
            
            # –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç Markdown –æ—Å—Ç–∞—Ç–∫–æ–≤
            header = re.sub(r'\*\*', '', header)
            header = re.sub(r'üõ†Ô∏è', 'üõ†', header)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —ç–º–æ–¥–∑–∏
            header = re.sub(r'üõ°Ô∏è', 'üõ°', header)
            
            # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—â–µ –Ω–µ –æ–±–µ—Ä–Ω—É—Ç –≤ <b>, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º
            if '<b>' not in header or '</b>' not in header:
                # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —ç–º–æ–¥–∑–∏ –≤ <b>
                header = re.sub(r'(üõ†|üìä|üõ°|üì±|üì¶|‚öôÔ∏è)\s*(.+)', r'\1 <b>\2</b>', header)
            
            if content:
                return f"{header}\n<blockquote>{content}</blockquote>"
            else:
                return header
        
        cleaned_text = re.sub(pattern, replace_with_blockquote, cleaned_text, flags=re.MULTILINE | re.DOTALL)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏–ø–ª–∏—Å—å
    cleaned_text = re.sub(r'(#[^\s#]+)(?=#)', r'\1 ', cleaned_text)
    
    return cleaned_text


async def process_single_announcement(ann, perplexity_processor, source_channel, markup_percentage):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: OCR, Perplexity, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Node.js API –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è.
    """
    message_id = ann["id"]
    print("--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ID: " + str(message_id))

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ custom_id –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ XXX-XXX
    custom_id = generate_custom_id()
    print(">> –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ—Å—Ç–∞:", custom_id)
    
    ocr_texts = []
    if ann.get("photos"):
        print(f">> –ó–∞–ø—É—Å–∫ OCR –¥–ª—è {len(ann['photos'])} —Ñ–æ—Ç–æ...")
        ocr = OCRProcessor(lang='ru', use_yandex=True)
        for photo_path in ann["photos"]:
            ocr_text = await ocr.extract_text(photo_path)
            if ocr_text and not ocr_text.startswith('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞'):
                ocr_texts.append(ocr_text)
        print(">> OCR –∑–∞–≤–µ—Ä—à–µ–Ω.")

    ocr_data = '\n'.join(ocr_texts)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ OCR –∏ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    from app.perplexity_api.text_formatter import extract_car_info_from_text
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    all_text = f"{ann.get('text', '')}\n{ocr_data}".strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    car_info = extract_car_info_from_text(all_text)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Ü–µ–Ω–∫—É –∫ —Ü–µ–Ω–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã
    from app.perplexity_api.text_formatter import format_price_with_markup, apply_markup_to_price
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å –Ω–∞—Ü–µ–Ω–∫–æ–π –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç–µ
    price_with_markup = format_price_with_markup(car_info, markup_percentage)
    
    car_data = {
        'brand': car_info.brand if car_info.brand else '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        'model': car_info.model if car_info.model else '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        'year': str(car_info.year) if car_info.year else '2023',
        'mileage': str(car_info.mileage) if car_info.mileage else '50000',
        'price': price_with_markup,  # –¶–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        'original_price': car_info.price,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        'currency': 'USD',  # –í—Å–µ–≥–¥–∞ –¥–æ–ª–ª–∞—Ä—ã
        'engine': car_info.engine_volume + '–ª, –±–µ–Ω–∑–∏–Ω' if car_info.engine_volume else '2.0–ª, –±–µ–Ω–∑–∏–Ω',
        'transmission': car_info.transmission if car_info.transmission else '–∞–≤—Ç–æ–º–∞—Ç',
        'drive_type': car_info.drive_type if car_info.drive_type else '–ø–µ—Ä–µ–¥–Ω–∏–π',
        'trim': car_info.trim if car_info.trim else '–∫–æ–º—Ñ–æ—Ä—Ç',
        'color': car_info.color if car_info.color else '–Ω–µ —É–∫–∞–∑–∞–Ω',
        'condition': car_info.condition if car_info.condition else '—Ö–æ—Ä–æ—à–µ–µ',
        'custom_id': custom_id,
        'city': '–ú–æ—Å–∫–≤–∞'
    }
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    formatter = MessageFormatter()
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Perplexity API, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂–∏
    if perplexity_processor:
        from app.perplexity_api.text_formatter import CarInfo, create_car_description_prompt
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç CarInfo –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        final_price = apply_markup_to_price(car_info.price, markup_percentage) if car_info.price else 25000
        car_info_for_prompt = CarInfo(
            brand=car_data['brand'],
            model=car_data['model'],
            year=car_data['year'],
            price=final_price,  # –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
            mileage=car_data['mileage'],
            engine_volume=car_data['engine'],
            transmission=car_data['transmission'],
            drive_type=car_data['drive_type'],
            color=car_data['color'],
            trim=car_data['trim'],
            condition=car_data['condition'],
            custom_id=custom_id
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂–∏ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∞–≤—Ç–æ
        prompt = create_car_description_prompt(
            car_info_for_prompt, 
            custom_context=f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann['text']}\n–î–∞–Ω–Ω—ã–µ OCR: {ocr_data}"
        )
        
        print(">> –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Perplexity API —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º...")
        msg = await perplexity_processor.process_text(prompt)
        print(">> –û—Ç–≤–µ—Ç –æ—Ç Perplexity –ø–æ–ª—É—á–µ–Ω.")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å HTML —Ü–∏—Ç–∞—Ç–∞–º–∏
        msg = format_perplexity_response_with_quotes(msg)
        print(">> –û—Ç–≤–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω —Å HTML —Ü–∏—Ç–∞—Ç–∞–º–∏.")
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –±–µ–∑ Perplexity
        msg = formatter.format_for_telegram(car_data)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ Cloudinary
    cloudinary_urls = []
    if ann.get("photos"):
        print(f">> –ó–∞–≥—Ä—É–∑–∫–∞ {len(ann['photos'])} —Ñ–æ—Ç–æ –≤ Cloudinary...")
        for i, photo_path in enumerate(ann["photos"]):
            if os.path.exists(photo_path):
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π public_id –¥–ª—è Cloudinary
                public_id = f"car_{custom_id}_{i+1}"
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary
                upload_result = upload_image_to_cloudinary(photo_path, public_id=public_id)
                if upload_result and upload_result.get('secure_url'):
                    cloudinary_url = upload_result['secure_url']
                    cloudinary_urls.append(cloudinary_url)
                    print(f">> –§–æ—Ç–æ {i+1} –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Cloudinary: {cloudinary_url}")
                else:
                    print(f">> –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ {i+1} –≤ Cloudinary")
        print(f">> –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Cloudinary: {len(cloudinary_urls)} –∏–∑ {len(ann['photos'])} —Ñ–æ—Ç–æ")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è Telegram)
    target_msg_id, _ = await send_message_with_photos_to_channel(msg, ann["photos"])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å —á–µ—Ä–µ–∑ Storage API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    print(">> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    save_result = save_car_with_formatting(
        custom_id=custom_id,
        source_message_id=message_id,
        source_channel_name=source_channel,
        description=msg,
        cloudinary_urls=cloudinary_urls,
        target_msg_id=target_msg_id
    )
    
    if save_result.get('message'):
        print(f">> ‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å {custom_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    else:
        print(f">> ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è {custom_id}: {save_result}")
    

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if ann.get("temp_dir") and os.path.exists(ann["temp_dir"]):
        shutil.rmtree(ann["temp_dir"])
        print(f">> –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ {ann['temp_dir']} —É–¥–∞–ª–µ–Ω–∞.")
    elif ann.get("photos"):
        try:
            photo_dir = os.path.dirname(ann["photos"][0])
            if os.path.exists(photo_dir) and photo_dir != "downloads" and photo_dir != os.path.abspath("downloads"):
                if "temp" in photo_dir or str(message_id) in photo_dir:
                    shutil.rmtree(photo_dir)
                    print(f">> –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ {photo_dir} —É–¥–∞–ª–µ–Ω–∞ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ).")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ —Å —Ñ–æ—Ç–æ: {e}")

async def process_all_cars_from_channel():
    print(">>> –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...")
    load_dotenv()
    
    try:
        source_channel = os.getenv("TELEGRAM_CHANNEL")
        if not source_channel:
            print("TELEGRAM_CHANNEL –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
            return

        limit, start_from_id = get_telegram_config()
        markup_percentage = get_pricing_config()
        print(f">>> –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {source_channel}...")
        announcements = await fetch_announcements_from_channel(source_channel, limit=limit, start_from_id=start_from_id)
        print(f">>> –ü–æ–ª—É—á–µ–Ω–æ {len(announcements)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

        api_key = os.getenv("PERPLEXITY_API_KEY")
        if not api_key:
            print("PERPLEXITY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return
        perplexity = PerplexityProcessor(api_key)

        for ann in announcements:
            await process_single_announcement(ann, perplexity, source_channel, markup_percentage)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω–≤–µ–π–µ—Ä–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    finally:
        print(">>> –ö–æ–Ω–≤–µ–π–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

if __name__ == "__main__":
    asyncio.run(process_all_cars_from_channel()) 