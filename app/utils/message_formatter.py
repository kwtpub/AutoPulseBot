from datetime import datetime
from typing import Dict, Optional

class MessageFormatter:
    def __init__(self, template_path: Optional[str] = None):
        self.default_template = '''üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}

üìù –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:
{description}

üìÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç:
{main_text}

üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {source}

üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {date}'''
        
        self.template = self._load_template(template_path) if template_path else self.default_template
        
    def _load_template(self, path: str) -> str:
        try:
            with open(path, 'r', encoding='utf-8') as f:
                return f.read()
        except:
            return self.default_template
            
    def format_message(self, data: Dict) -> str:
        # Ensure all required fields exist
        formatted_data = {
            'title': data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
            'description': self._quote_sections(data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')),
            'main_text': self._truncate_text(self._quote_sections(data.get('main_text', '')), 3000),
            'source': data.get('source', '–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω'),
            'date': data.get('date', datetime.now().strftime('%Y-%m-%d %H:%M'))
        }

        # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—Ç—Ä–æ–∫–µ
        for key in formatted_data:
            # –ï—Å–ª–∏ main_text ‚Äî dict, –¥–µ–ª–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
            if key == 'main_text' and isinstance(formatted_data[key], dict):
                formatted_data[key] = '\n'.join(f"{k}: {v}" for k, v in formatted_data[key].items() if v)
            elif not isinstance(formatted_data[key], str):
                formatted_data[key] = str(formatted_data[key])

        # Handle empty fields gracefully
        for key, value in formatted_data.items():
            if not value or value.strip() == '':
                formatted_data[key] = f'[{key} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç]'

        return self.template.format(**formatted_data)
        
    def _truncate_text(self, text: str, max_length: int) -> str:
        if len(text) <= max_length:
            return text
        return text[:max_length-3] + '...'
        
    def validate_message_length(self, message: str) -> bool:
        # Telegram message limit is 4096 characters
        return len(message) <= 4096 

    def format_auto_data(self, data: Dict) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:
        –ü—Ä–æ–¥–∞—ë—Ç—Å—è ... [–ú–∞—Ä–∫–∞] [–ú–æ–¥–µ–ª—å] ...
        –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: (–≤ —Ü–∏—Ç–∞—Ç–µ)
        –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∏ –æ–ø—Ü–∏–∏: (–≤ —Ü–∏—Ç–∞—Ç–µ)
        –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: (–≤ —Ü–∏—Ç–∞—Ç–µ)
        –§–æ—Ç–æ ...
        [–ú–∞—Ä–∫–∞] [–ú–æ–¥–µ–ª—å] ‚Äî [—Å–ª–æ–≥–∞–Ω]
        #—Ö—ç—à—Ç–µ–≥–∏
        """
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        brand = data.get('brand', '') or data.get('–º–∞—Ä–∫–∞', '') or data.get('–ú–∞—Ä–∫–∞', '') or data.get('model', '').split()[0] if data.get('model') else ''
        model = data.get('model', '') or data.get('–º–æ–¥–µ–ª—å', '') or data.get('–ú–æ–¥–µ–ª—å', '')
        gearbox = data.get('gearbox', '') or data.get('–∫–æ—Ä–æ–±–∫–∞', '') or data.get('–¢–∏–ø –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á', '')
        description = data.get('short_description', '') or data.get('description', '') or '—Å—Ç–∏–ª—å–Ω—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π'
        state = data.get('state', '') or '–≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏!'
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        year = data.get('year', '') or data.get('–≥–æ–¥', '') or data.get('–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞', '')
        engine = data.get('engine', '') or data.get('–¥–≤–∏–≥–∞—Ç–µ–ª—å', '') or data.get('–î–≤–∏–≥–∞—Ç–µ–ª—å', '')
        power = data.get('power', '') or data.get('–º–æ—â–Ω–æ—Å—Ç—å', '') or data.get('–ú–æ—â–Ω–æ—Å—Ç—å', '')
        engine_code = data.get('engine_code', '') or data.get('–ö–æ–¥ –¥–≤–∏–≥–∞—Ç–µ–ª—è', '')
        mileage = data.get('mileage', '') or data.get('–ø—Ä–æ–±–µ–≥', '') or data.get('–ü—Ä–æ–±–µ–≥', '')
        body = data.get('body', '') or data.get('–∫—É–∑–æ–≤', '') or data.get('–¢–∏–ø –∫—É–∑–æ–≤–∞', '')
        drive = data.get('drive', '') or data.get('–ø—Ä–∏–≤–æ–¥', '') or data.get('–ü—Ä–∏–≤–æ–¥', '')
        vin = data.get('vin', '') or data.get('VIN', '')
        weight = data.get('weight', '') or data.get('–º–∞—Å—Å–∞', '') or data.get('–ú–∞—Å—Å–∞', '')
        color = data.get('interior_color', '') or data.get('—Ü–≤–µ—Ç —Å–∞–ª–æ–Ω–∞', '') or data.get('–¶–≤–µ—Ç —Å–∞–ª–æ–Ω–∞', '')
        seats = data.get('seats', '') or data.get('–º–µ—Å—Ç', '') or data.get('–ú–µ—Å—Ç', '')
        price = data.get('price', '') or data.get('—Ü–µ–Ω–∞', '') or data.get('–¶–µ–Ω–∞', '')
        # –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ (—Å–ø–∏—Å–∫–∏)
        options = data.get('options', []) or data.get('–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è', []) or data.get('–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è', [])
        if isinstance(options, str):
            options = [o.strip() for o in options.split('\n') if o.strip()]
        advantages = data.get('advantages', []) or data.get('–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', []) or data.get('–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', [])
        if isinstance(advantages, str):
            advantages = [a.strip() for a in advantages.split('\n') if a.strip()]
        # –°–ª–æ–≥–∞–Ω
        slogan = data.get('slogan', '') or data.get('—Å–ª–æ–≥–∞–Ω', '') or '–ø—Ä–µ–º–∏—É–º –∫–æ–º—Ñ–æ—Ä—Ç –∏ –Ω–µ–º–µ—Ü–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ!'
        # –•—ç—à—Ç–µ–≥–∏
        hashtags = []
        if brand:
            hashtags += [f'#{brand}', f'#{brand}{model}', f'#{model}', f'#{brand}{year}', f'#{body}', f'#{gearbox}', f'#–ü—Ä–æ–¥–∞–∂–∞–ê–≤—Ç–æ', f'#–ê–≤—Ç–æ{body}', f'#–ê–≤—Ç–æ{brand}', f'#–ü—Ä–æ–¥–∞–∂–∞{brand}']
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        msg = f"–ü—Ä–æ–¥–∞—ë—Ç—Å—è {description} {brand} {model} —Å {gearbox} –∏ –æ—Ç–ª–∏—á–Ω–æ–π –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–µ–π. {state}\n\n"
        msg += "–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        char_lines = []
        if year: char_lines.append(f"‚Ä¢ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {year}")
        if engine or power or engine_code:
            engine_str = engine
            if power: engine_str += f", {power}"
            if engine_code: engine_str += f", {engine_code}"
            char_lines.append(f"‚Ä¢ –î–≤–∏–≥–∞—Ç–µ–ª—å: {engine_str}")
        if mileage: char_lines.append(f"‚Ä¢ –ü—Ä–æ–±–µ–≥: {mileage} –∫–º")
        if body: char_lines.append(f"‚Ä¢ –ö—É–∑–æ–≤: {body}")
        if drive: char_lines.append(f"‚Ä¢ –ü—Ä–∏–≤–æ–¥: {drive}")
        if vin: char_lines.append(f"‚Ä¢ VIN: {vin}")
        if weight: char_lines.append(f"‚Ä¢ –ú–∞—Å—Å–∞: {weight} –∫–≥")
        if color: char_lines.append(f"‚Ä¢ –¶–≤–µ—Ç —Å–∞–ª–æ–Ω–∞: {color}")
        if seats: char_lines.append(f"‚Ä¢ –ú–µ—Å—Ç: {seats}")
        # –ë–ª–æ–∫ —Ü–∏—Ç–∞—Ç—ã
        if char_lines:
            msg += '\n'.join([f'> {line}' for line in char_lines]) + '\n\n'
        # –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è
        msg += "–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∏ –æ–ø—Ü–∏–∏:\n"
        if options:
            msg += '\n'.join([f'> ‚Ä¢ {o}' for o in options]) + '\n\n'
        # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
        msg += "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        if advantages:
            msg += '\n'.join([f'> ‚Ä¢ {a}' for a in advantages]) + '\n\n'
        msg += "–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø—Ä–∏–ª–∞–≥–∞—é—Ç—Å—è ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä!\n\n"
        msg += f"{brand} {model} ‚Äî {slogan}\n\n"
        if hashtags:
            msg += ' '.join(hashtags)
        return msg.strip()

    def _quote_sections(self, text: str) -> str:
        """
        –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –±–ª–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Ü–∏—Ç–∞—Ç—É (> ...), –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏.
        """
        if not text:
            return text
        import re
        # –°–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers = [
            '–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
            '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∏ –æ–ø—Ü–∏–∏',
            '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞'
        ]
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        pattern = r'(^|\n)(%s):?\n' % '|'.join(headers)
        parts = re.split(pattern, text)
        if len(parts) <= 1:
            return text  # –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        result = []
        i = 0
        while i < len(parts):
            if parts[i] in headers:
                header = parts[i]
                # –°–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî —Ç–µ–∫—Å—Ç –±–ª–æ–∫–∞
                block = parts[i+1] if i+1 < len(parts) else ''
                # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –±–ª–æ–∫–∞ –≤ —Ü–∏—Ç–∞—Ç—É
                quoted = '\n'.join('> ' + line if line.strip() else '' for line in block.strip().split('\n'))
                result.append(f'{header}:\n{quoted}')
                i += 2
            else:
                # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –≤–Ω–µ —Å–µ–∫—Ü–∏–π
                if parts[i].strip():
                    result.append(parts[i].strip())
                i += 1
        return '\n\n'.join(result) 