"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ custom_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç XXX-XXX
"""

import asyncio
import aiohttp
import json
from typing import List, Dict, Tuple
from app.utils.id_generator import (
    convert_old_id_to_new_format, 
    is_valid_custom_id,
    mark_id_as_used,
    get_id_statistics
)

class CustomIDMigrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ custom_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, node_api_url: str = "http://localhost:3001"):
        self.node_api_url = node_api_url
        self.migration_log = []
        self.conflicts = []
        
    async def get_all_cars(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.node_api_url}/api/cars") as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get('cars', [])
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {response.status}")
                        return []
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {e}")
            return []
    
    async def update_car_id(self, old_id: str, new_id: str, car_data: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç custom_id –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º car_data —Å –Ω–æ–≤—ã–º ID
            updated_data = car_data.copy()
            updated_data['custom_id'] = new_id
            
            async with aiohttp.ClientSession() as session:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                async with session.put(
                    f"{self.node_api_url}/api/cars/{old_id}",
                    json=updated_data,
                    headers={'Content-Type': 'application/json'}
                ) as response:
                    if response.status == 200:
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {old_id} ‚Üí {new_id}: {response.status}")
                        error_text = await response.text()
                        print(f"   –î–µ—Ç–∞–ª–∏: {error_text}")
                        return False
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {old_id} ‚Üí {new_id}: {e}")
            return False
    
    def analyze_existing_ids(self, cars: List[Dict]) -> Tuple[List[Dict], List[Dict], List[Dict]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏—Ö
        
        Returns:
            Tuple[valid_cars, needs_migration, conflicts]
        """
        valid_cars = []
        needs_migration = []
        conflicts = []
        
        existing_new_ids = set()
        
        for car in cars:
            custom_id = car.get('custom_id', '')
            
            if is_valid_custom_id(custom_id):
                valid_cars.append(car)
                existing_new_ids.add(custom_id)
            else:
                needs_migration.append(car)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã - –∫–æ–≥–¥–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É ID
        for car in needs_migration:
            old_id = car.get('custom_id', '')
            new_id = convert_old_id_to_new_format(old_id)
            
            if new_id in existing_new_ids:
                conflicts.append({
                    'car': car,
                    'old_id': old_id,
                    'proposed_new_id': new_id,
                    'conflict_reason': '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                })
        
        return valid_cars, needs_migration, conflicts
    
    async def migrate_ids(self, dry_run: bool = True) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ custom_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
        cars = await self.get_all_cars()
        if not cars:
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã'}
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –±–∞–∑–µ: {len(cars)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ID
        valid_cars, needs_migration, conflicts = self.analyze_existing_ids(cars)
        
        print(f"‚úÖ –£–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: {len(valid_cars)}")
        print(f"üîÑ –¢—Ä–µ–±—É—é—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: {len(needs_migration)}")
        print(f"‚ö†Ô∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {len(conflicts)}")
        
        # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ ID –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
        for car in valid_cars:
            mark_id_as_used(car['custom_id'])
        
        migration_plan = []
        successful_migrations = 0
        failed_migrations = 0
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        for car in needs_migration:
            old_id = car.get('custom_id', '')
            new_id = convert_old_id_to_new_format(old_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —ç—Ç–æ–≥–æ ID –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
            is_conflict = any(c['old_id'] == old_id for c in conflicts)
            
            if not is_conflict:
                migration_plan.append({
                    'car': car,
                    'old_id': old_id,
                    'new_id': new_id
                })
        
        print(f"\nüìã –ü–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏: {len(migration_plan)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        if migration_plan:
            print("üîç –ü—Ä–∏–º–µ—Ä—ã –º–∏–≥—Ä–∞—Ü–∏–∏:")
            for i, item in enumerate(migration_plan[:5]):
                print(f"  {i+1}. {item['old_id']} ‚Üí {item['new_id']}")
            if len(migration_plan) > 5:
                print(f"  ... –∏ –µ—â–µ {len(migration_plan) - 5}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        if conflicts:
            print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã ({len(conflicts)}):")
            for conflict in conflicts[:3]:
                print(f"  {conflict['old_id']} ‚Üí {conflict['proposed_new_id']} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
            if len(conflicts) > 3:
                print(f"  ... –∏ –µ—â–µ {len(conflicts) - 3}")
        
        if dry_run:
            print(f"\nüîç –≠—Ç–æ –ø—Ä–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –≤–Ω–æ—Å–∏–ª–∏—Å—å")
            return {
                'dry_run': True,
                'total_cars': len(cars),
                'valid_cars': len(valid_cars),
                'needs_migration': len(needs_migration),
                'conflicts': len(conflicts),
                'migration_plan': len(migration_plan)
            }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é
        print(f"\nüöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")
        
        for i, item in enumerate(migration_plan):
            car = item['car']
            old_id = item['old_id']
            new_id = item['new_id']
            
            print(f"  [{i+1}/{len(migration_plan)}] {old_id} ‚Üí {new_id}...", end="")
            
            success = await self.update_car_id(old_id, new_id, car)
            if success:
                successful_migrations += 1
                mark_id_as_used(new_id)
                print(" ‚úÖ")
                self.migration_log.append(f"SUCCESS: {old_id} ‚Üí {new_id}")
            else:
                failed_migrations += 1
                print(" ‚ùå")
                self.migration_log.append(f"FAILED: {old_id} ‚Üí {new_id}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.1)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = get_id_statistics()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_migrations}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed_migrations}")
        print(f"   ‚ö†Ô∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {len(conflicts)}")
        print(f"   üìà –í—Å–µ–≥–æ ID –≤ —Å–∏—Å—Ç–µ–º–µ: {stats['used_count']}")
        
        return {
            'dry_run': False,
            'total_cars': len(cars),
            'valid_cars': len(valid_cars),
            'successful_migrations': successful_migrations,
            'failed_migrations': failed_migrations,
            'conflicts': len(conflicts),
            'migration_log': self.migration_log,
            'id_statistics': stats
        }
    
    async def handle_conflicts(self) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ ID –ø—É—Ç–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID"""
        cars = await self.get_all_cars()
        if not cars:
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã'}
        
        valid_cars, needs_migration, conflicts = self.analyze_existing_ids(cars)
        
        if not conflicts:
            print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return {'conflicts_resolved': 0}
        
        print(f"üîß –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ {len(conflicts)} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
        
        # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ ID –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
        for car in valid_cars:
            mark_id_as_used(car['custom_id'])
        
        resolved_conflicts = 0
        failed_conflicts = 0
        
        for i, conflict in enumerate(conflicts):
            car = conflict['car']
            old_id = conflict['old_id']
            
            print(f"  [{i+1}/{len(conflicts)}] –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –¥–ª—è {old_id}...", end="")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ–≥–æ
            from app.utils.id_generator import generate_custom_id
            new_id = generate_custom_id()
            
            success = await self.update_car_id(old_id, new_id, car)
            if success:
                resolved_conflicts += 1
                print(f" ‚úÖ ‚Üí {new_id}")
                self.migration_log.append(f"CONFLICT_RESOLVED: {old_id} ‚Üí {new_id}")
            else:
                failed_conflicts += 1
                print(" ‚ùå")
                self.migration_log.append(f"CONFLICT_FAILED: {old_id}")
            
            await asyncio.sleep(0.1)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:")
        print(f"   ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ: {resolved_conflicts}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed_conflicts}")
        
        return {
            'conflicts_resolved': resolved_conflicts,
            'conflicts_failed': failed_conflicts,
            'migration_log': self.migration_log
        }
    
    def save_migration_log(self, filename: str = "migration_log.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        log_data = {
            'migration_log': self.migration_log,
            'conflicts': self.conflicts,
            'timestamp': asyncio.get_event_loop().time()
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(log_data, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –õ–æ–≥ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üîÑ –£—Ç–∏–ª–∏—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ Custom ID")
    print("=" * 50)
    
    migrator = CustomIDMigrator()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫
    print("üîç –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    dry_run_result = await migrator.migrate_ids(dry_run=True)
    
    if 'error' in dry_run_result:
        print(f"‚ùå {dry_run_result['error']}")
        return
    
    if dry_run_result['needs_migration'] == 0:
        print("‚úÖ –í—Å–µ ID —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n‚ùì –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é {dry_run_result['migration_plan']} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π? (y/N): ", end="")
    
    try:
        import sys
        response = input().strip().lower()
        if response == 'y':
            print("\nüöÄ –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
            result = await migrator.migrate_ids(dry_run=False)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if result.get('conflicts', 0) > 0:
                print(f"\nüîß –®–∞–≥ 3: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
                conflict_result = await migrator.handle_conflicts()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
            migrator.save_migration_log()
            
            print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        else:
            print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except (EOFError, KeyboardInterrupt):
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    asyncio.run(main()) 