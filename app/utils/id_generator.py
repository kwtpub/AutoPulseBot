"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
–§–æ—Ä–º–∞—Ç: XXX-XXX (–Ω–∞–ø—Ä–∏–º–µ—Ä, 023-455)
"""

import random
import string
from typing import Set
import re

class CustomIDGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä custom ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX-XXX"""
    
    def __init__(self):
        self._used_ids: Set[str] = set()
    
    def generate_id(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX-XXX
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX-XXX, –Ω–∞–ø—Ä–∏–º–µ—Ä "023-455"
        """
        while True:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6 —Ü–∏—Ñ—Ä
            digits = [str(random.randint(0, 9)) for _ in range(6)]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ XXX-XXX
            custom_id = f"{digits[0]}{digits[1]}{digits[2]}-{digits[3]}{digits[4]}{digits[5]}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            if custom_id not in self._used_ids:
                self._used_ids.add(custom_id)
                return custom_id
    
    def is_valid_format(self, custom_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ ID —Ñ–æ—Ä–º–∞—Ç—É XXX-XXX
        
        Args:
            custom_id: ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not isinstance(custom_id, str):
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: 3 —Ü–∏—Ñ—Ä—ã, —Ç–∏—Ä–µ, 3 —Ü–∏—Ñ—Ä—ã
        pattern = r'^\d{3}-\d{3}$'
        return bool(re.match(pattern, custom_id))
    
    def mark_as_used(self, custom_id: str) -> None:
        """
        –û—Ç–º–µ—á–∞–µ—Ç ID –∫–∞–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        
        Args:
            custom_id: ID –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏
        """
        if self.is_valid_format(custom_id):
            self._used_ids.add(custom_id)
    
    def reset_used_ids(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö ID"""
        self._used_ids.clear()
    
    def get_used_ids_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö ID"""
        return len(self._used_ids)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
_global_generator = CustomIDGenerator()

def generate_custom_id() -> str:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ custom ID
    
    Returns:
        –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX-XXX
    """
    return _global_generator.generate_id()

def is_valid_custom_id(custom_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ custom ID
    
    Args:
        custom_id: ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    """
    return _global_generator.is_valid_format(custom_id)

def mark_id_as_used(custom_id: str) -> None:
    """
    –û—Ç–º–µ—á–∞–µ—Ç ID –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    
    Args:
        custom_id: ID –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏
    """
    _global_generator.mark_as_used(custom_id)

def convert_old_id_to_new_format(old_id: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ –Ω–æ–≤—ã–π
    –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    
    Args:
        old_id: –°—Ç–∞—Ä—ã–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, "12345678")
        
    Returns:
        –ù–æ–≤—ã–π ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX-XXX
    """
    # –ï—Å–ª–∏ —É–∂–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if is_valid_custom_id(old_id):
        return old_id
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä
    digits_only = ''.join(filter(str.isdigit, str(old_id)))
    
    if len(digits_only) >= 6:
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä
        last_six = digits_only[-6:]
        return f"{last_six[:3]}-{last_six[3:]}"
    else:
        # –ï—Å–ª–∏ —Ü–∏—Ñ—Ä –º–µ–Ω—å—à–µ 6, –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
        return generate_custom_id()

def extract_custom_id_from_text(text: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç custom ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ ID
        
    Returns:
        –ù–∞–π–¥–µ–Ω–Ω—ã–π ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX-XXX –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    if not text:
        return ""
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω XXX-XXX –≤ —Ç–µ–∫—Å—Ç–µ
    pattern = r'\b\d{3}-\d{3}\b'
    match = re.search(pattern, text)
    
    if match:
        return match.group()
    
    return ""

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ID

def format_id_for_display(custom_id: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç ID –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        custom_id: ID –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
    """
    if is_valid_custom_id(custom_id):
        return f"üÜî {custom_id}"
    else:
        return f"üÜî {custom_id} (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)"

def generate_batch_ids(count: int) -> list[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
    
    Args:
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ID –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
    Returns:
        –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
    """
    return [generate_custom_id() for _ in range(count)]

def get_id_statistics() -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º ID
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    total_possible = 1000000  # 000-000 –¥–æ 999-999
    used_count = _global_generator.get_used_ids_count()
    
    return {
        "total_possible": total_possible,
        "used_count": used_count,
        "remaining": total_possible - used_count,
        "usage_percentage": (used_count / total_possible) * 100
    }

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

def test_id_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ID"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Custom ID ===")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ ID
    ids = generate_batch_ids(10)
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã ID: {ids}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    for custom_id in ids:
        is_valid = is_valid_custom_id(custom_id)
        print(f"{custom_id}: {'‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' if is_valid else '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    unique_ids = set(ids)
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑ {len(ids)}: {len(unique_ids)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = get_id_statistics()
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {stats['used_count']} –∏–∑ {stats['total_possible']} –≤–æ–∑–º–æ–∂–Ω—ã—Ö")
    
    # –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö ID
    old_ids = ["12345678", "ABC123456", "999", "test-id"]
    print("\n–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö ID:")
    for old_id in old_ids:
        new_id = convert_old_id_to_new_format(old_id)
        print(f"{old_id} ‚Üí {new_id}")
    
    # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
    test_texts = [
        "ID: 123-456",
        "–ê–≤—Ç–æ–º–æ–±–∏–ª—å 789-012 –¥–æ—Å—Ç—É–ø–µ–Ω",
        "–ö–æ–¥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: 555-777, –∑–≤–æ–Ω–∏—Ç–µ!",
        "–ù–∏–∫–∞–∫–∏—Ö ID –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ"
    ]
    print("\n–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ —Ç–µ–∫—Å—Ç–∞:")
    for text in test_texts:
        extracted_id = extract_custom_id_from_text(text)
        print(f"'{text}' ‚Üí {'‚úÖ ' + extracted_id if extracted_id else '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}")

if __name__ == "__main__":
    test_id_generation() 