"""
–¢–µ—Å—Ç—ã –¥–ª—è Perplexity API –º–æ–¥—É–ª—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""

import pytest
import asyncio
from unittest.mock import Mock, AsyncMock, patch
from dataclasses import dataclass

from .perplexity_client import (
    PerplexityClient, 
    PerplexityConfig,
    PerplexityAPIError,
    PerplexityAuthError
)
from .text_formatter import (
    CarInfo,
    extract_car_info_from_text,
    create_car_description_prompt,
    format_car_announcement,
    validate_car_announcement_format
)
from .legacy_wrapper import PerplexityProcessor

class TestPerplexityClient:
    """–¢–µ—Å—Ç—ã –¥–ª—è PerplexityClient"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.config = PerplexityConfig(
            api_key="test_key",
            model="sonar-pro",
            timeout=30
        )
        self.client = PerplexityClient(self.config)
    
    async def test_client_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        assert self.client.config.api_key == "test_key"
        assert self.client.config.model == "sonar-pro"
        assert "Bearer test_key" in self.client.headers["Authorization"]
    
    @patch('aiohttp.ClientSession.post')
    async def test_successful_chat_completion(self, mock_post):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
        # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        mock_response = AsyncMock()
        mock_response.status = 200
        mock_response.json.return_value = {
            "choices": [{"message": {"content": "Test response"}}]
        }
        mock_post.return_value.__aenter__.return_value = mock_response
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –º–æ–∫–Ω—É—Ç–æ–π —Å–µ—Å—Å–∏–µ–π
        await self.client._ensure_session()
        
        messages = [{"role": "user", "content": "Test prompt"}]
        result = await self.client.chat_completion(messages)
        
        assert result["choices"][0]["message"]["content"] == "Test response"
    
    @patch('aiohttp.ClientSession.post')
    async def test_auth_error_handling(self, mock_post):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        mock_response = AsyncMock()
        mock_response.status = 401
        mock_response.text.return_value = "Unauthorized"
        mock_post.return_value.__aenter__.return_value = mock_response
        
        await self.client._ensure_session()
        
        messages = [{"role": "user", "content": "Test"}]
        
        with pytest.raises(PerplexityAuthError):
            await self.client.chat_completion(messages)
    
    async def test_process_text_method(self):
        """–¢–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ process_text"""
        with patch.object(self.client, 'chat_completion') as mock_completion:
            mock_completion.return_value = {
                "choices": [{"message": {"content": "Processed text"}}]
            }
            
            result = await self.client.process_text("Test prompt")
            assert result == "Processed text"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω chat_completion —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
            mock_completion.assert_called_once()
            called_messages = mock_completion.call_args[0][0]
            assert len(called_messages) == 1
            assert called_messages[0]["content"] == "Test prompt"
    
    async def test_test_connection(self):
        """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        with patch.object(self.client, 'chat_completion') as mock_completion:
            mock_completion.return_value = {
                "choices": [{"message": {"content": "OK"}}]
            }
            
            result = await self.client.test_connection()
            assert result is True
    
    async def teardown_method(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        await self.client.close()

class TestTextFormatter:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    
    def test_extract_car_info_basic(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""
        text = "–ü—Ä–æ–¥–∞–º Toyota Camry 2015 –≥–æ–¥–∞, —Ü–µ–Ω–∞ 1500000 —Ä—É–±–ª–µ–π, –ø—Ä–æ–±–µ–≥ 120000 –∫–º"
        
        car_info = extract_car_info_from_text(text)
        
        assert car_info.year == 2015
        assert car_info.price == 1500000
        assert car_info.mileage == 120000
    
    def test_extract_car_info_with_engine(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –æ–±—ä–µ–º–æ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è"""
        text = "BMW X5 2018, –¥–≤–∏–≥–∞—Ç–µ–ª—å 2.0–ª, –∞–≤—Ç–æ–º–∞—Ç, –ø–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥"
        
        car_info = extract_car_info_from_text(text)
        
        assert car_info.year == 2018
        assert car_info.engine_volume == "2.0"
        assert car_info.transmission == "–ê–≤—Ç–æ–º–∞—Ç"
        assert car_info.drive_type == "–ü–æ–ª–Ω—ã–π"
    
    def test_create_car_description_prompt(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        prompt = create_car_description_prompt(
            announcement_text="Toyota Camry 2015",
            ocr_data="–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            custom_id="test_id",
            markup_percentage=15.0
        )
        
        assert "Toyota Camry 2015" in prompt
        assert "15%" in prompt
        assert "[–ú–∞—Ä–∫–∞] [–ú–æ–¥–µ–ª—å] [–ì–æ–¥]" in prompt
        assert "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" in prompt
    
    def test_format_car_announcement(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        characteristics = {
            "year": "2015",
            "engine": "2.0–ª",
            "mileage": "120000 –∫–º",
            "transmission": "–ê–≤—Ç–æ–º–∞—Ç"
        }
        
        result = format_car_announcement(
            brand="Toyota",
            model="Camry",
            year=2015,
            price=1500000,
            description="–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü",
            characteristics=characteristics
        )
        
        assert "[Toyota] [Camry] [2015]" in result
        assert "1 500 000" in result
        assert "üí´ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ" in result
        assert "–ì–æ–¥: 2015" in result
        assert "#toyota" in result.lower()
    
    def test_validate_car_announcement_format_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
        text = "[Toyota] [Camry] [2015] - –¶–µ–Ω–∞: 1 500 000 ‚ÇΩ\n\n–û–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"
        
        is_valid, message = validate_car_announcement_format(text)
        
        assert is_valid is True
        assert "–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω" in message
    
    def test_validate_car_announcement_format_invalid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
        text = "Toyota Camry 2015 - 1500000 —Ä—É–±–ª–µ–π"
        
        is_valid, message = validate_car_announcement_format(text)
        
        assert is_valid is False
        assert "–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É" in message

class TestLegacyWrapper:
    """–¢–µ—Å—Ç—ã –¥–ª—è legacy wrapper"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.processor = PerplexityProcessor("test_api_key")
    
    def test_legacy_processor_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ legacy processor"""
        assert self.processor.api_key == "test_api_key"
        assert self.processor.base_url == "https://api.perplexity.ai"
        assert self.processor.config.api_key == "test_api_key"
    
    def test_create_prompt_method(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ —á–µ—Ä–µ–∑ legacy –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        prompt = self.processor.create_prompt(
            announcement_text="Test car",
            ocr_data="OCR data",
            custom_id="id123",
            markup_percentage=10.0
        )
        
        assert "Test car" in prompt
        assert "OCR data" in prompt
        assert "10%" in prompt
    
    async def test_process_text_method(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ legacy –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        with patch.object(self.processor, '_get_client') as mock_get_client:
            mock_client = AsyncMock()
            mock_client.process_text.return_value = "Processed result"
            mock_get_client.return_value = mock_client
            
            result = await self.processor.process_text("Test prompt")
            
            assert result == "Processed result"
            mock_client.process_text.assert_called_once_with(
                "Test prompt", 
                '–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ —Å–ª–µ–¥—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞.'
            )
    
    async def test_error_handling_compatibility(self):
        """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        with patch.object(self.processor, '_get_client') as mock_get_client:
            mock_client = AsyncMock()
            mock_client.process_text.side_effect = Exception("API Error")
            mock_get_client.return_value = mock_client
            
            with pytest.raises(Exception) as exc_info:
                await self.processor.process_text("Test")
            
            assert "Perplexity API error: API Error" in str(exc_info.value)
    
    async def teardown_method(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        await self.processor.close()

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (—Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ API –∫–ª—é—á–∞)
class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (—Ç—Ä–µ–±—É—é—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞)"""
    
    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_real_api_call(self):
        """
        –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ API
        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –º–µ—Ç–∫–æ–π integration –∏ —Ä–µ–∞–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º
        """
        import os
        
        api_key = os.getenv("PERPLEXITY_API_KEY")
        if not api_key:
            pytest.skip("PERPLEXITY_API_KEY not set")
        
        config = PerplexityConfig(api_key=api_key, timeout=30)
        
        async with PerplexityClient(config) as client:
            result = await client.process_text("Say 'Hello, World!'")
            assert "Hello" in result or "hello" in result.lower()

# Pytest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (–±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö)
    pytest.main([__file__, "-v", "-m", "not integration"]) 