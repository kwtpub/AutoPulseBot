"""
Text Formatter - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
"""

import re
from typing import Dict, Optional, Tuple, List
from dataclasses import dataclass
from datetime import datetime

@dataclass
class CarInfo:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""
    brand: Optional[str] = None
    model: Optional[str] = None
    year: Optional[int] = None
    price: Optional[float] = None
    mileage: Optional[int] = None
    engine_volume: Optional[str] = None
    transmission: Optional[str] = None
    drive_type: Optional[str] = None
    body_type: Optional[str] = None
    color: Optional[str] = None
    fuel_type: Optional[str] = None
    trim: Optional[str] = None
    condition: Optional[str] = None
    custom_id: Optional[str] = None

def extract_car_info_from_text(text: str) -> CarInfo:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    Args:
        text: –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        
    Returns:
        CarInfo —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    car_info = CarInfo()
    text_lower = text.lower()
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å)
    lines = text.strip().split('\n')
    first_line = lines[0].strip() if lines else ""
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∏—Ç–∞–π—Å–∫–∏—Ö –º–∞—Ä–æ–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    chinese_brands = [
        'geely', 'chery', 'byd', 'haval', 'great wall', 'changan', 'dongfeng',
        'faw', 'jac', 'lifan', 'zotye', 'brilliance', 'foton', 'maxus',
        'tank', 'ora', 'li auto', 'nio', 'xpeng', 'aiways', 'lixiang'
    ]
    
    # –ò—â–µ–º –º–∞—Ä–∫—É –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    first_line_lower = first_line.lower()
    for brand in chinese_brands:
        if brand in first_line_lower:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–∏
            brand_pos = first_line_lower.find(brand)
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –º–∞—Ä–∫–∏ –∫–∞–∫ –º–æ–¥–µ–ª—å
            after_brand = first_line[brand_pos + len(brand):].strip()
            
            # –£–±–∏—Ä–∞–µ–º –≥–æ–¥ –∏–∑ –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            year_pattern = r'\s*(19|20)\d{2}.*'
            model_without_year = re.sub(year_pattern, '', after_brand).strip()
            
            car_info.brand = brand.title()
            car_info.model = model_without_year if model_without_year else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"
            break
    
    # –ï—Å–ª–∏ –º–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
    if not car_info.brand and first_line:
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "–°–ª–æ–≤–æ –°–ª–æ–≤–æ –≥–æ–¥"
        brand_model_pattern = r'^([A-Za-z–ê-–Ø–∞-—è]+)\s+([A-Za-z–ê-–Ø–∞-—è0-9\s]+?)\s+(\d{4})'
        match = re.search(brand_model_pattern, first_line)
        if match:
            car_info.brand = match.group(1).title()
            car_info.model = match.group(2).strip()
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ (4 —Ü–∏—Ñ—Ä—ã –æ—Ç 1980 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ + 2)
    current_year = datetime.now().year
    year_pattern = r'\b(19[8-9]\d|20[0-2]\d)\b'
    year_match = re.search(year_pattern, text)
    if year_match:
        year = int(year_match.group(1))
        if 1980 <= year <= current_year + 2:
            car_info.year = year
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    price_patterns = [
        r'\$(\d{1,3}(?:[\s,]\d{3})*(?:\.\d{2})?)',  # $25,000 –∏–ª–∏ $25 000
        r'(\d{1,3}(?:[\s,]\d{3})*(?:\.\d{2})?)\s*\$',  # 25,000$ –∏–ª–∏ 25 000$
        r'(\d{1,3}(?:[\s,]?\d{3})*(?:\.\d{2})?)\s*(?:–¥–æ–ª–ª|dollar|USD)',  # 25000 –¥–æ–ª–ª
    ]
    
    for pattern in price_patterns:
        price_match = re.search(pattern, text, re.IGNORECASE)
        if price_match:
            price_str = price_match.group(1)
            if price_str:
                # –û—á–∏—â–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —á–∏—Å–ª–æ
                clean_price = price_str.replace(' ', '').replace(',', '')
                try:
                    car_info.price = float(clean_price)
                    break
                except ValueError:
                    continue
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞
    mileage_patterns = [
        r'(\d{1,3}(?:\s?\d{3})*)\s*(?:–∫–º|—Ç—ã—Å\.?\s*–∫–º)',
        r'–ø—Ä–æ–±–µ–≥[:\s]*(\d{1,3}(?:\s?\d{3})*)',
    ]
    
    for pattern in mileage_patterns:
        mileage_match = re.search(pattern, text_lower)
        if mileage_match:
            mileage_str = mileage_match.group(1).replace(' ', '')
            try:
                mileage = int(mileage_str)
                # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–≥ –≤ —Ç—ã—Å—è—á–∞—Ö
                if mileage < 1000:
                    mileage *= 1000
                car_info.mileage = mileage
                break
            except ValueError:
                continue
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
    engine_pattern = r'(\d+\.?\d*)\s*(?:–ª\.?|–ª–∏—Ç—Ä)'
    engine_match = re.search(engine_pattern, text_lower)
    if engine_match:
        car_info.engine_volume = engine_match.group(1)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á
    if any(word in text_lower for word in ['–∞–≤—Ç–æ–º–∞—Ç', '–∞–∫–ø–ø', '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è']):
        car_info.transmission = '–ê–≤—Ç–æ–º–∞—Ç'
    elif any(word in text_lower for word in ['–º–µ—Ö–∞–Ω–∏–∫–∞', '–º–∫–ø–ø', '–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è']):
        car_info.transmission = '–ú–µ—Ö–∞–Ω–∏–∫–∞'
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–≤–æ–¥–∞
    if any(word in text_lower for word in ['–ø–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥', '4wd', 'awd']):
        car_info.drive_type = '–ü–æ–ª–Ω—ã–π'
    elif any(word in text_lower for word in ['–ø–µ—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–≤–æ–¥', 'fwd']):
        car_info.drive_type = '–ü–µ—Ä–µ–¥–Ω–∏–π'
    elif any(word in text_lower for word in ['–∑–∞–¥–Ω–∏–π –ø—Ä–∏–≤–æ–¥', 'rwd']):
        car_info.drive_type = '–ó–∞–¥–Ω–∏–π'
    
    return car_info

def create_car_description_prompt(car_info: CarInfo, custom_context: str = "") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è Perplexity API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    
    Args:
        car_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        custom_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è API
    """
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    prompt = f"""–°–æ–∑–¥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML –¥–ª—è Telegram. 

–ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
- –ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: {car_info.brand} {car_info.model}
- –ì–æ–¥: {car_info.year}
- –ü—Ä–æ–±–µ–≥: {car_info.mileage} –∫–º
- –¶–µ–Ω–∞: {car_info.price}
- –î–≤–∏–≥–∞—Ç–µ–ª—å: {car_info.engine_volume}
- –ö–ü–ü: {car_info.transmission}
- –ü—Ä–∏–≤–æ–¥: {car_info.drive_type}
- –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: {car_info.trim}
- –¶–≤–µ—Ç: {car_info.color}
- –°–æ—Å—Ç–æ—è–Ω–∏–µ: {car_info.condition}

–°–¢–†–£–ö–¢–£–†–ê –û–ë–™–Ø–í–õ–ï–ù–ò–Ø:
1. –ó–∞–≥–æ–ª–æ–≤–æ–∫: üöó <b>[–ú–∞—Ä–∫–∞] [–ú–æ–¥–µ–ª—å] [–ì–æ–¥]</b>
2. Custom ID: <b>Custom ID:</b> {car_info.custom_id or '–∞–≤—Ç–æ-–æ–Ω–ª–∞–π–Ω'}
3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ <blockquote>
4. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
5. –£—Å–ª–æ–≤–∏—è –ø—Ä–æ–¥–∞–∂–∏ (—Ç–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω, –¥–æ—Å—Ç–∞–≤–∫–∞, –±–µ–∑–Ω–∞–ª)
6. –¶–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö —Å –ø–æ–º–µ—Ç–∫–æ–π (–≤ –ú–∏–Ω—Å–∫–µ, –±–µ–∑ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
7. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (—Å–∏—Å—Ç–µ–º—ã, –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –æ–ø—Ü–∏–∏)
8. –•–µ—à—Ç–µ–≥–∏

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ü–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Æ:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û HTML-—Ç–µ–≥–∏: <b></b>, <i></i>, <blockquote></blockquote>
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown (**, *, #, -, >)
- –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–µ–ª–∞–π –∂–∏—Ä–Ω—ã–º–∏: <b>üîç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>
- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–π –≤ <blockquote>–î–≤–∏–≥–∞—Ç–µ–ª—å: 2.0–ª
–ö–ü–ü: –∞–≤—Ç–æ–º–∞—Ç</blockquote>
- –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏

–ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
üöó <b>Geely Coolray 2023</b>
<b>Custom ID:</b> 947-175

<b>üîç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>
<blockquote>–î–≤–∏–≥–∞—Ç–µ–ª—å: 2.0 –ª, –±–µ–Ω–∑–∏–Ω, 245 –ª.—Å.
–ö–ü–ü: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è
–ü—Ä–∏–≤–æ–¥: –ü–æ–ª–Ω—ã–π
–ü—Ä–æ–±–µ–≥: 50,000 –∫–º</blockquote>

<b>üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</b>
–°–æ—Å—Ç–æ—è–Ω–∏–µ: –•–æ—Ä–æ—à–µ–µ
–î–æ–∫—É–º–µ–Ω—Ç—ã: –í –Ω–∞–ª–∏—á–∏–∏

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ï–¢–ê–õ–ò –ö –î–û–ë–ê–í–õ–ï–ù–ò–Æ:
- –¢–æ—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏
- –°–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–º–æ—â–∏ –≤–æ–¥–∏—Ç–µ–ª—é
- –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –∏ connectivity (CarPlay/Android Auto)
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –æ–ø—Ü–∏–∏ (–∫–ª–∏–º–∞—Ç, –ø–æ–¥–æ–≥—Ä–µ–≤—ã, –¥–∞—Ç—á–∏–∫–∏)
- –†–∞–∑–º–µ—Ä—ã –±–∞–≥–∞–∂–Ω–∏–∫–∞ –∏ –∫–ª–∏—Ä–µ–Ω—Å
- –≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å (—Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞)

{custom_context}

–í–ê–ñ–ù–û: 
- –¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê (USD)
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∫–∞–∫–∏—Ö Markdown —Å–∏–º–≤–æ–ª–æ–≤
- –í—Å–µ –∂–∏—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ <b></b>
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¢–û–õ–¨–ö–û –≤ <blockquote></blockquote>

–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ 900 —Å–∏–º–≤–æ–ª–æ–≤."""

    return prompt

def format_car_announcement(
    brand: str,
    model: str,
    year: int,
    price: float,
    description: str,
    characteristics: Dict[str, str],
    hashtags: List[str] = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    
    Args:
        brand: –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        model: –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è  
        year: –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞
        price: –¶–µ–Ω–∞
        description: –û–ø–∏—Å–∞–Ω–∏–µ
        characteristics: –°–ª–æ–≤–∞—Ä—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        hashtags: –°–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    """
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
    price_formatted = f"{int(price):,}".replace(',', ' ')
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"[{brand}] [{model}] [{year}] - –¶–µ–Ω–∞: {price_formatted} ‚ÇΩ"
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    desc_section = f"üí´ {description}"
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    char_lines = []
    if characteristics:
        char_lines.append("üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        main_chars = []
        if 'year' in characteristics:
            main_chars.append(f"–ì–æ–¥: {characteristics['year']}")
        if 'engine' in characteristics:
            main_chars.append(f"–î–≤–∏–≥–∞—Ç–µ–ª—å: {characteristics['engine']}")
        if 'mileage' in characteristics:
            main_chars.append(f"–ü—Ä–æ–±–µ–≥: {characteristics['mileage']}")
        
        if main_chars:
            char_lines.append("‚Ä¢ " + " | ".join(main_chars))
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        second_chars = []
        if 'transmission' in characteristics:
            second_chars.append(f"–ö–æ—Ä–æ–±–∫–∞: {characteristics['transmission']}")
        if 'drive' in characteristics:
            second_chars.append(f"–ü—Ä–∏–≤–æ–¥: {characteristics['drive']}")
        if 'body' in characteristics:
            second_chars.append(f"–ö—É–∑–æ–≤: {characteristics['body']}")
            
        if second_chars:
            char_lines.append("‚Ä¢ " + " | ".join(second_chars))
    
    # –°–ª–æ–≥–∞–Ω
    slogan = f"üöó {brand} {model} ‚Äî –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ!"
    
    # –•—ç—à—Ç–µ–≥–∏
    if not hashtags:
        hashtags = [
            f"#{brand.lower()}", 
            f"#{model.lower().replace(' ', '')}", 
            f"#{year}",
            "#–∞–≤—Ç–æ–º–æ–±–∏–ª—å", 
            "#–ø—Ä–æ–¥–∞–∂–∞"
        ]
    
    hashtag_line = " ".join(hashtags)
    
    # –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    sections = [header, "", desc_section]
    
    if char_lines:
        sections.append("")
        sections.extend(char_lines)
    
    sections.extend(["", slogan, "", hashtag_line])
    
    return "\n".join(sections)

def apply_markup_to_price(original_price: float, markup_percentage: float) -> float:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Ü–µ–Ω–∫—É –∫ —Ü–µ–Ω–µ
    
    Args:
        original_price: –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞
        markup_percentage: –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏
        
    Returns:
        –¶–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
    """
    return original_price * (1 + markup_percentage / 100)

def format_price_with_markup(car_info: CarInfo, markup_percentage: float = 15.0) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å –Ω–∞—Ü–µ–Ω–∫–æ–π –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    
    Args:
        car_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Å —Ü–µ–Ω–æ–π
        markup_percentage: –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    """
    if not car_info.price:
        return "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Ü–µ–Ω–∫—É
    final_price = apply_markup_to_price(car_info.price, markup_percentage)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    return f"${final_price:,.0f}"

def validate_car_announcement_format(text: str) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ–±—É–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        Tuple[bool, str]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    
    lines = text.strip().split('\n')
    if not lines:
        return False, "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"
    
    first_line = lines[0].strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    pattern = r'^\[.+\]\s*\[.+\]\s*\[\d{4}\]\s*-\s*–¶–µ–Ω–∞:\s*[\d\s]+.*‚ÇΩ?'
    
    if not re.match(pattern, first_line):
        return False, f"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É [–ú–∞—Ä–∫–∞] [–ú–æ–¥–µ–ª—å] [–ì–æ–¥] - –¶–µ–Ω–∞: [—Ü–µ–Ω–∞]. –ü–æ–ª—É—á–µ–Ω–æ: {first_line}"
    
    return True, "–§–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"

def extract_structured_data_from_announcement(text: str) -> Dict[str, str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    Args:
        text: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    data = {}
    
    lines = text.strip().split('\n')
    if not lines:
        return data
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    first_line = lines[0].strip()
    header_pattern = r'^\[(.+?)\]\s*\[(.+?)\]\s*\[(\d{4})\]\s*-\s*–¶–µ–Ω–∞:\s*([\d\s]+)'
    
    header_match = re.match(header_pattern, first_line)
    if header_match:
        data['brand'] = header_match.group(1)
        data['model'] = header_match.group(2)
        data['year'] = header_match.group(3)
        data['price'] = header_match.group(4).replace(' ', '')
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    for line in lines:
        if '|' in line and ('–ì–æ–¥:' in line or '–î–≤–∏–≥–∞—Ç–µ–ª—å:' in line):
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            parts = [part.strip() for part in line.split('|')]
            for part in parts:
                if ':' in part:
                    key_value = part.split(':', 1)
                    if len(key_value) == 2:
                        key = key_value[0].strip().replace('‚Ä¢ ', '')
                        value = key_value[1].strip()
                        data[key.lower()] = value
    
    return data 