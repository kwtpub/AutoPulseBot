"""
Text Formatter - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
"""

import re
from typing import Dict, Optional, Tuple, List
from dataclasses import dataclass
from datetime import datetime

@dataclass
class CarInfo:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""
    brand: Optional[str] = None
    model: Optional[str] = None
    year: Optional[int] = None
    price: Optional[float] = None
    mileage: Optional[int] = None
    engine_volume: Optional[str] = None
    transmission: Optional[str] = None
    drive_type: Optional[str] = None
    body_type: Optional[str] = None
    color: Optional[str] = None
    fuel_type: Optional[str] = None

def extract_car_info_from_text(text: str) -> CarInfo:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    Args:
        text: –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        
    Returns:
        CarInfo —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    car_info = CarInfo()
    text_lower = text.lower()
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ (4 —Ü–∏—Ñ—Ä—ã –æ—Ç 1980 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ + 2)
    current_year = datetime.now().year
    year_pattern = r'\b(19[8-9]\d|20[0-2]\d)\b'
    year_match = re.search(year_pattern, text)
    if year_match:
        year = int(year_match.group(1))
        if 1980 <= year <= current_year + 2:
            car_info.year = year
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã (—Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    price_patterns = [
        r'(\d{1,3}(?:\s?\d{3})*)\s*(?:—Ç—ã—Å—è—á|—Ç—ã—Å|—Ç\.—Ä\.?|—Ä—É–±)',
        r'(\d{1,3}(?:\s?\d{3})*)\s*‚ÇΩ',
        r'—Ü–µ–Ω–∞[:\s]*(\d{1,3}(?:\s?\d{3})*)',
        r'(\d{1,3}(?:\s?\d{3})*)\s*000'
    ]
    
    for pattern in price_patterns:
        price_match = re.search(pattern, text_lower)
        if price_match:
            price_str = price_match.group(1).replace(' ', '')
            try:
                price = float(price_str)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ä—É–±–ª–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if price < 10000:  # –í–µ—Ä–æ—è—Ç–Ω–æ –≤ —Ç—ã—Å—è—á–∞—Ö
                    price *= 1000
                car_info.price = price
                break
            except ValueError:
                continue
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞
    mileage_patterns = [
        r'(\d{1,3}(?:\s?\d{3})*)\s*(?:–∫–º|—Ç—ã—Å\.?\s*–∫–º)',
        r'–ø—Ä–æ–±–µ–≥[:\s]*(\d{1,3}(?:\s?\d{3})*)',
    ]
    
    for pattern in mileage_patterns:
        mileage_match = re.search(pattern, text_lower)
        if mileage_match:
            mileage_str = mileage_match.group(1).replace(' ', '')
            try:
                mileage = int(mileage_str)
                # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–≥ –≤ —Ç—ã—Å—è—á–∞—Ö
                if mileage < 1000:
                    mileage *= 1000
                car_info.mileage = mileage
                break
            except ValueError:
                continue
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
    engine_pattern = r'(\d+\.?\d*)\s*(?:–ª\.?|–ª–∏—Ç—Ä)'
    engine_match = re.search(engine_pattern, text_lower)
    if engine_match:
        car_info.engine_volume = engine_match.group(1)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á
    if any(word in text_lower for word in ['–∞–≤—Ç–æ–º–∞—Ç', '–∞–∫–ø–ø', '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è']):
        car_info.transmission = '–ê–≤—Ç–æ–º–∞—Ç'
    elif any(word in text_lower for word in ['–º–µ—Ö–∞–Ω–∏–∫–∞', '–º–∫–ø–ø', '–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è']):
        car_info.transmission = '–ú–µ—Ö–∞–Ω–∏–∫–∞'
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–≤–æ–¥–∞
    if any(word in text_lower for word in ['–ø–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥', '4wd', 'awd']):
        car_info.drive_type = '–ü–æ–ª–Ω—ã–π'
    elif any(word in text_lower for word in ['–ø–µ—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–≤–æ–¥', 'fwd']):
        car_info.drive_type = '–ü–µ—Ä–µ–¥–Ω–∏–π'
    elif any(word in text_lower for word in ['–∑–∞–¥–Ω–∏–π –ø—Ä–∏–≤–æ–¥', 'rwd']):
        car_info.drive_type = '–ó–∞–¥–Ω–∏–π'
    
    return car_info

def create_car_description_prompt(
    announcement_text: str,
    ocr_data: str,
    custom_id: str,
    markup_percentage: float,
    car_info: Optional[CarInfo] = None
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Perplexity –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    Args:
        announcement_text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        ocr_data: –î–∞–Ω–Ω—ã–µ OCR –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        custom_id: –ö–∞—Å—Ç–æ–º–Ω—ã–π ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        markup_percentage: –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏
        car_info: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        
    Returns:
        –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Perplexity
    """
    
    if not car_info:
        car_info = extract_car_info_from_text(announcement_text)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –°–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.

–ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {announcement_text}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ñ–æ—Ç–æ (OCR): {ocr_data if ocr_data else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ñ–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –§–û–†–ú–ê–¢ –ü–ï–†–í–û–ô –°–¢–†–û–ö–ò:
[–ú–∞—Ä–∫–∞] [–ú–æ–¥–µ–ª—å] [–ì–æ–¥] - –¶–µ–Ω–∞: [—Ü–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π {markup_percentage}%]

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –†–ï–ó–£–õ–¨–¢–ê–¢–£:
1. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω–∞—á–Ω–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∞: [–ú–∞—Ä–∫–∞] [–ú–æ–¥–µ–ª—å] [–ì–æ–¥] - –¶–µ–Ω–∞: [—Ü–µ–Ω–∞]
2. –î–æ–±–∞–≤—å –Ω–∞—Ü–µ–Ω–∫—É {markup_percentage}% –∫ –∏—Å—Ö–æ–¥–Ω–æ–π —Ü–µ–Ω–µ
3. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 800 —Å–∏–º–≤–æ–ª–æ–≤)
4. –í–∫–ª—é—á–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
5. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
6. –î–æ–±–∞–≤—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
[–ú–∞—Ä–∫–∞] [–ú–æ–¥–µ–ª—å] [–ì–æ–¥] - –¶–µ–Ω–∞: [—Ü–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π]

üí´ –ö—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
‚Ä¢ –ì–æ–¥: [–≥–æ–¥] | –î–≤–∏–≥–∞—Ç–µ–ª—å: [–æ–±—ä–µ–º] –ª | –ü—Ä–æ–±–µ–≥: [–ø—Ä–æ–±–µ–≥] –∫–º
‚Ä¢ –ö–æ—Ä–æ–±–∫–∞: [—Ç–∏–ø] | –ü—Ä–∏–≤–æ–¥: [—Ç–∏–ø] | –ö—É–∑–æ–≤: [—Ç–∏–ø]

üöó [–ú–∞—Ä–∫–∞] [–ú–æ–¥–µ–ª—å] ‚Äî [–∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–¥–∞—é—â–∏–π —Å–ª–æ–≥–∞–Ω]

#–º–∞—Ä–∫–∞#–º–æ–¥–µ–ª—å #–≥–æ–¥ #–∞–≤—Ç–æ–º–æ–±–∏–ª—å #–ø—Ä–æ–¥–∞–∂–∞

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É [–ú–∞—Ä–∫–∞] [–ú–æ–¥–µ–ª—å] [–ì–æ–¥]!
    """
    
    return prompt.strip()

def format_car_announcement(
    brand: str,
    model: str,
    year: int,
    price: float,
    description: str,
    characteristics: Dict[str, str],
    hashtags: List[str] = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    
    Args:
        brand: –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        model: –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è  
        year: –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞
        price: –¶–µ–Ω–∞
        description: –û–ø–∏—Å–∞–Ω–∏–µ
        characteristics: –°–ª–æ–≤–∞—Ä—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        hashtags: –°–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    """
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
    price_formatted = f"{int(price):,}".replace(',', ' ')
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"[{brand}] [{model}] [{year}] - –¶–µ–Ω–∞: {price_formatted} ‚ÇΩ"
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    desc_section = f"üí´ {description}"
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    char_lines = []
    if characteristics:
        char_lines.append("üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        main_chars = []
        if 'year' in characteristics:
            main_chars.append(f"–ì–æ–¥: {characteristics['year']}")
        if 'engine' in characteristics:
            main_chars.append(f"–î–≤–∏–≥–∞—Ç–µ–ª—å: {characteristics['engine']}")
        if 'mileage' in characteristics:
            main_chars.append(f"–ü—Ä–æ–±–µ–≥: {characteristics['mileage']}")
        
        if main_chars:
            char_lines.append("‚Ä¢ " + " | ".join(main_chars))
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        second_chars = []
        if 'transmission' in characteristics:
            second_chars.append(f"–ö–æ—Ä–æ–±–∫–∞: {characteristics['transmission']}")
        if 'drive' in characteristics:
            second_chars.append(f"–ü—Ä–∏–≤–æ–¥: {characteristics['drive']}")
        if 'body' in characteristics:
            second_chars.append(f"–ö—É–∑–æ–≤: {characteristics['body']}")
            
        if second_chars:
            char_lines.append("‚Ä¢ " + " | ".join(second_chars))
    
    # –°–ª–æ–≥–∞–Ω
    slogan = f"üöó {brand} {model} ‚Äî –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ!"
    
    # –•—ç—à—Ç–µ–≥–∏
    if not hashtags:
        hashtags = [
            f"#{brand.lower()}", 
            f"#{model.lower().replace(' ', '')}", 
            f"#{year}",
            "#–∞–≤—Ç–æ–º–æ–±–∏–ª—å", 
            "#–ø—Ä–æ–¥–∞–∂–∞"
        ]
    
    hashtag_line = " ".join(hashtags)
    
    # –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    sections = [header, "", desc_section]
    
    if char_lines:
        sections.append("")
        sections.extend(char_lines)
    
    sections.extend(["", slogan, "", hashtag_line])
    
    return "\n".join(sections)

def apply_markup_to_price(original_price: float, markup_percentage: float) -> float:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Ü–µ–Ω–∫—É –∫ —Ü–µ–Ω–µ
    
    Args:
        original_price: –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞
        markup_percentage: –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏
        
    Returns:
        –¶–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
    """
    return original_price * (1 + markup_percentage / 100)

def validate_car_announcement_format(text: str) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ–±—É–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        Tuple[bool, str]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    
    lines = text.strip().split('\n')
    if not lines:
        return False, "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"
    
    first_line = lines[0].strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    pattern = r'^\[.+\]\s*\[.+\]\s*\[\d{4}\]\s*-\s*–¶–µ–Ω–∞:\s*[\d\s]+.*‚ÇΩ?'
    
    if not re.match(pattern, first_line):
        return False, f"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É [–ú–∞—Ä–∫–∞] [–ú–æ–¥–µ–ª—å] [–ì–æ–¥] - –¶–µ–Ω–∞: [—Ü–µ–Ω–∞]. –ü–æ–ª—É—á–µ–Ω–æ: {first_line}"
    
    return True, "–§–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"

def extract_structured_data_from_announcement(text: str) -> Dict[str, str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    Args:
        text: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    data = {}
    
    lines = text.strip().split('\n')
    if not lines:
        return data
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    first_line = lines[0].strip()
    header_pattern = r'^\[(.+?)\]\s*\[(.+?)\]\s*\[(\d{4})\]\s*-\s*–¶–µ–Ω–∞:\s*([\d\s]+)'
    
    header_match = re.match(header_pattern, first_line)
    if header_match:
        data['brand'] = header_match.group(1)
        data['model'] = header_match.group(2)
        data['year'] = header_match.group(3)
        data['price'] = header_match.group(4).replace(' ', '')
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    for line in lines:
        if '|' in line and ('–ì–æ–¥:' in line or '–î–≤–∏–≥–∞—Ç–µ–ª—å:' in line):
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            parts = [part.strip() for part in line.split('|')]
            for part in parts:
                if ':' in part:
                    key_value = part.split(':', 1)
                    if len(key_value) == 2:
                        key = key_value[0].strip().replace('‚Ä¢ ', '')
                        value = key_value[1].strip()
                        data[key.lower()] = value
    
    return data 