"""
Text Formatter - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
"""

import re
from typing import Dict, Optional, Tuple, List
from dataclasses import dataclass
from datetime import datetime
from app.utils.cbr_exchange_rate import get_cbr_usd_rate_with_markup

@dataclass
class CarInfo:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""
    brand: Optional[str] = None
    model: Optional[str] = None
    year: Optional[int] = None
    price: Optional[float] = None
    mileage: Optional[int] = None
    engine_volume: Optional[str] = None
    transmission: Optional[str] = None
    drive_type: Optional[str] = None
    body_type: Optional[str] = None
    color: Optional[str] = None
    fuel_type: Optional[str] = None
    trim: Optional[str] = None
    condition: Optional[str] = None
    custom_id: Optional[str] = None

def extract_car_info_from_text(text: str) -> CarInfo:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ fallback
    
    Args:
        text: –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        
    Returns:
        CarInfo —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    print(f"üîç –≠–¢–ê–ü 0: –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤):\n{text[:300]}...")
    
    car_info = CarInfo()
    text_lower = text.lower()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    lines = [line.strip() for line in text.strip().split('\n') if line.strip()]
    first_line = lines[0] if lines else ""
    
    print(f"üîç –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏: '{first_line}'")
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∞—Ä–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
    brands_mapping = {
        # –ö–∏—Ç–∞–π—Å–∫–∏–µ –º–∞—Ä–∫–∏
        'geely': ['geely', '–¥–∂–∏–ª–∏', '–≥–∏–ª–∏'],
        'chery': ['chery', '—á–µ—Ä–∏', '—á–µ—Ä—Ä–∏'],
        'byd': ['byd', '–±–∏–¥', '–±–∏-–∞–π-–¥–∏'],
        'haval': ['haval', '—Ö–∞–≤–∞–ª', '—Ö–∞–≤–∞–ª—å'],
        'great wall': ['great wall', '–≥—Ä–µ–π—Ç –≤–æ–ª–ª', '–≤–µ–ª–∏–∫–∞—è —Å—Ç–µ–Ω–∞'],
        'changan': ['changan', '—á–∞–Ω–≥–∞–Ω', '—á–∞–Ω–≥–∞–Ω—å'],
        'dongfeng': ['dongfeng', '–¥–æ–Ω–≥—Ñ–µ–Ω–≥'],
        'faw': ['faw', '—Ñ–∞–≤'],
        'jac': ['jac', '–∂–∞–∫', '–¥–∂–∞–∫'],
        'lifan': ['lifan', '–ª–∏—Ñ–∞–Ω'],
        'zotye': ['zotye', '–∑–æ—Ç—å–µ'],
        'brilliance': ['brilliance', '–±—Ä–∏–ª–ª–∏–∞–Ω—Å'],
        'foton': ['foton', '—Ñ–æ—Ç–æ–Ω'],
        'maxus': ['maxus', '–º–∞–∫—Å—É—Å'],
        'tank': ['tank', '—Ç–∞–Ω–∫'],
        'ora': ['ora', '–æ—Ä–∞'],
        'nio': ['nio', '–Ω–∏–æ'],
        'xpeng': ['xpeng', '–∏–∫—Å–ø–µ–Ω–≥'],
        'hongqi': ['hongqi', '—Ö—É–Ω—Ü–∏'],
        'gac': ['gac', '–≥–∞–∫'],
        'roewe': ['roewe', '—Ä–æ–µ–≤–µ'],
        'mg': ['mg', '–º–≥'],
        'baojun': ['baojun', '–±–∞–æ—Ü–∑—é–Ω—å'],
        'wuling': ['wuling', '–≤—É–ª–∏–Ω–≥'],
        'lynk': ['lynk', '–ª–∏–Ω–∫'],
        'lixiang': ['lixiang', '–ª–∏—Å—è–Ω', '–ª–∏—Å—è–Ω–≥', 'li xiang'],
        # –°–æ—Å—Ç–∞–≤–Ω—ã–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ/–ø—Ä–µ–º–∏—É–º
        'mercedes-benz': ['mercedes-benz', '–º–µ—Ä—Å–µ–¥–µ—Å-–±–µ–Ω—Ü', 'mercedes benz'],
        'land rover': ['land rover', '–ª—ç–Ω–¥ —Ä–æ–≤–µ—Ä', '–ª–µ–Ω–¥ —Ä–æ–≤–µ—Ä'],
        'range rover': ['range rover', '—Ä—ç–Ω–¥–∂ —Ä–æ–≤–µ—Ä', '—Ä–µ–π–Ω–¥–∂ —Ä–æ–≤–µ—Ä'],
        'rolls-royce': ['rolls-royce', '—Ä–æ–ª–ª—Å-—Ä–æ–π—Å', 'rolls royce'],
        'alfa romeo': ['alfa romeo', '–∞–ª—å—Ñ–∞ —Ä–æ–º–µ–æ'],
        'aston martin': ['aston martin', '–∞—Å—Ç–æ–Ω –º–∞—Ä—Ç–∏–Ω'],
        'mini cooper': ['mini cooper', '–º–∏–Ω–∏ –∫—É–ø–µ—Ä'],
        # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ
        'audi': ['audi', '–∞—É–¥–∏'],
        'bmw': ['bmw', '–±–º–≤'],
        'volkswagen': ['volkswagen', '—Ñ–æ–ª—å–∫—Å–≤–∞–≥–µ–Ω', 'vw'],
        'opel': ['opel', '–æ–ø–µ–ª—å'],
        'peugeot': ['peugeot', '–ø–µ–∂–æ'],
        'renault': ['renault', '—Ä–µ–Ω–æ'],
        'skoda': ['skoda', '—à–∫–æ–¥–∞'],
        'citroen': ['citroen', '—Å–∏—Ç—Ä–æ–µ–Ω', '—Å–∏—Ç—Ä–æ—ç–Ω'],
        'fiat': ['fiat', '—Ñ–∏–∞—Ç'],
        'seat': ['seat', '—Å–µ–∞—Ç'],
        'volvo': ['volvo', '–≤–æ–ª—å–≤–æ'],
        'saab': ['saab', '—Å–∞–∞–±'],
        'smart': ['smart', '—Å–º–∞—Ä—Ç'],
        'dacia': ['dacia', '–¥–∞—á–∏—è', '–¥–∞—á–∞'],
        'lancia': ['lancia', '–ª–∞–Ω—á–∞', '–ª–∞–Ω—Å–∏—è'],
        'lotus': ['lotus', '–ª–æ—Ç—É—Å'],
        'porsche': ['porsche', '–ø–æ—Ä—à–µ'],
        'jaguar': ['jaguar', '—è–≥—É–∞—Ä'],
        'bentley': ['bentley', '–±–µ–Ω—Ç–ª–∏'],
        'bugatti': ['bugatti', '–±—É–≥–∞—Ç—Ç–∏'],
        'maserati': ['maserati', '–º–∞—Å–µ—Ä–∞—Ç–∏'],
        'ferrari': ['ferrari', '—Ñ–µ—Ä—Ä–∞—Ä–∏'],
        'lamborghini': ['lamborghini', '–ª–∞–º–±–æ—Ä–≥–∏–Ω–∏'],
        'mini': ['mini', '–º–∏–Ω–∏'],
        # –Ø–ø–æ–Ω—Å–∫–∏–µ
        'toyota': ['toyota', '—Ç–æ–π–æ—Ç–∞'],
        'honda': ['honda', '—Ö–æ–Ω–¥–∞'],
        'nissan': ['nissan', '–Ω–∏—Å—Å–∞–Ω'],
        'mazda': ['mazda', '–º–∞–∑–¥–∞'],
        'mitsubishi': ['mitsubishi', '–º–∏—Ç—Å—É–±–∏—Å–∏', '–º–∏—Ü—É–±–∏—Å–∏'],
        'subaru': ['subaru', '—Å—É–±–∞—Ä—É'],
        'suzuki': ['suzuki', '—Å—É–∑—É–∫–∏'],
        'lexus': ['lexus', '–ª–µ–∫—Å—É—Å'],
        'infiniti': ['infiniti', '–∏–Ω—Ñ–∏–Ω–∏—Ç–∏'],
        'acura': ['acura', '–∞–∫—É—Ä–∞'],
        'daihatsu': ['daihatsu', '–¥–∞–π—Ö–∞—Ç—Å—É'],
        'isuzu': ['isuzu', '–∏—Å—É–∑—É'],
        # –ö–æ—Ä–µ–π—Å–∫–∏–µ
        'hyundai': ['hyundai', '—Ö—é–Ω–¥–∞–π', '—Ö–µ–Ω–¥–∞–π'],
        'kia': ['kia', '–∫–∏–∞'],
        'ssangyong': ['ssangyong', '—Å—Å–∞–Ω–≥–π–æ–Ω–≥', '—Å–∞–Ω–≥—ë–Ω–≥'],
        'genesis': ['genesis', '–≥–µ–Ω–µ–∑–∏—Å'],
        'daewoo': ['daewoo', '–¥—ç—É', '–¥–µ—É'],
        # –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ
        'ford': ['ford', '—Ñ–æ—Ä–¥'],
        'chevrolet': ['chevrolet', '—à–µ–≤—Ä–æ–ª–µ'],
        'cadillac': ['cadillac', '–∫–∞–¥–∏–ª–ª–∞–∫'],
        'chrysler': ['chrysler', '–∫—Ä–∞–π—Å–ª–µ—Ä'],
        'dodge': ['dodge', '–¥–æ–¥–∂'],
        'jeep': ['jeep', '–¥–∂–∏–ø'],
        'lincoln': ['lincoln', '–ª–∏–Ω–∫–æ–ª—å–Ω'],
        'buick': ['buick', '–±—å—é–∏–∫'],
        'gmc': ['gmc', '–¥–∂–∏—ç–º—Å–∏'],
        'hummer': ['hummer', '—Ö–∞–º–º–µ—Ä'],
        'tesla': ['tesla', '—Ç–µ—Å–ª–∞'],
        'ram': ['ram', '—Ä–∞–º'],
        # –†–æ—Å—Å–∏–π—Å–∫–∏–µ
        'lada': ['lada', '–≤–∞–∑', '–ª–∞–¥–∞'],
        'uaz': ['uaz', '—É–∞–∑'],
        'gaz': ['gaz', '–≥–∞–∑'],
        'volga': ['volga', '–≤–æ–ª–≥–∞'],
        'moskvich': ['moskvich', '–º–æ—Å–∫–≤–∏—á'],
        'zaz': ['zaz', '–∑–∞–∑'],
        'luaz': ['luaz', '–ª—É–∞–∑'],
        # –ü—Ä–æ—á–∏–µ
        'mercedes': ['mercedes'],  # –û–¥–∏–Ω–æ—á–Ω—ã–π mercedes –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞
        # –≠–∫–∑–æ—Ç–∏–∫–∞, —Ä–µ–¥–∫–∏–µ, –Ω–∏—à–µ–≤—ã–µ, –Ω–æ–≤—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏ –∏ –¥—Ä.
        'aixam': ['aixam', '–∞–π–∫—Å–∞–º'],
        'ariel': ['ariel', '–∞—Ä–∏—ç–ª—å'],
        'baic': ['baic', '–±–∞–π–∫'],
        'baw': ['baw', '–±–∞–≤'],
        'belgee': ['belgee', '–±–µ–ª–¥–∂–∏', '–±–µ–ª–¥–∂–∏'],
        'borgward': ['borgward', '–±–æ—Ä–≥–≤–∞—Ä–¥'],
        'brabus': ['brabus', '–±—Ä–∞–±—É—Å'],
        'bufori': ['bufori', '–±—É—Ñ–æ—Ä–∏'],
        'byton': ['byton', '–±–∞–π—Ç–æ–Ω'],
        'changhe': ['changhe', '—á–∞–Ω—Ö–µ'],
        'datsun': ['datsun', '–¥–∞—Ç—Å—É–Ω'],
        'derways': ['derways', '–¥–µ—Ä–≤–µ–π—Å'],
        'dfm': ['dfm', '–¥—Ñ–º'],
        'dr': ['dr', '–¥—Ä'],
        'ds': ['ds', '–¥—Å'],
        'exeed': ['exeed', '—ç–∫—Å–∏–¥'],
        'fisker': ['fisker', '—Ñ–∏—Å–∫–µ—Ä'],
        'haima': ['haima', '—Ö–∞–π–º–∞'],
        'hino': ['hino', '—Ö–∏–Ω–æ'],
        'iran khodro': ['iran khodro', '–∏—Ä–∞–Ω —Ö–æ–¥—Ä–æ'],
        'jetour': ['jetour', '–∂–µ—Ç—É—Ä'],
        'jmc': ['jmc', '–¥–∂–º—Å'],
        'kamaz': ['kamaz', '–∫–∞–º–∞–∑'],
        'king long': ['king long', '–∫–∏–Ω–≥ –ª–æ–Ω–≥'],
        'landwind': ['landwind', '–ª—ç–Ω–¥–≤–∏–Ω–¥'],
        'leapmotor': ['leapmotor', '–ª–∏–ø–º–æ—Ç–æ—Ä'],
        'mahindra': ['mahindra', '–º–∞—Ö–∏–Ω–¥—Ä–∞'],
        'maruti': ['maruti', '–º–∞—Ä—É—Ç–∏'],
        'maybach': ['maybach', '–º–∞–π–±–∞—Ö'],
        'microcar': ['microcar', '–º–∏–∫—Ä–æ–∫–∞—Ä'],
        'moskvich': ['moskvich', '–º–æ—Å–∫–≤–∏—á'],
        'nio': ['nio', '–Ω–∏–æ'],
        'perodua': ['perodua', '–ø–µ—Ä–æ–¥—É–∞'],
        'proton': ['proton', '–ø—Ä–æ—Ç–æ–Ω'],
        'ravon': ['ravon', '—Ä–∞–≤–æ–Ω'],
        'saipa': ['saipa', '—Å–∞–π–ø–∞'],
        'scion': ['scion', '—Å–∞–π–æ–Ω'],
        'shineray': ['shineray', '—à–∞–π–Ω–µ—Ä–µ–π'],
        'ssangyong': ['ssangyong', '—Å—Å–∞–Ω–≥–π–æ–Ω–≥', '—Å–∞–Ω–≥—ë–Ω–≥'],
        'tata': ['tata', '—Ç–∞—Ç–∞'],
        'vortex': ['vortex', '–≤–æ—Ä—Ç–µ–∫—Å'],
        'weling': ['weling', '–≤–µ–ª–∏–Ω–≥'],
        'zotye': ['zotye', '–∑–æ—Ç—å–µ'],
        'zx': ['zx', '–∑—Ö'],
        # –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏ –∏ –Ω–æ–≤—ã–µ –±—Ä–µ–Ω–¥—ã
        'neta': ['neta', '–Ω–µ—Ç–∞'],
        'seres': ['seres', '—Å–µ—Ä–µ—Å'],
        'voyah': ['voyah', '–≤–æ—è'],
        'skywell': ['skywell', '—Å–∫–∞–π–≤–µ–ª–ª'],
        'weltmeister': ['weltmeister', '–≤–µ–ª—å—Ç–º–∞–π—Å—Ç–µ—Ä'],
        'wm motor': ['wm motor', '–≤–º –º–æ—Ç–æ—Ä'],
        'zeekr': ['zeekr', '–∑–∏–∫—Ä'],
        # –ò–Ω–¥–∏–π—Å–∫–∏–µ –∏ –º–∞–ª–∞–π–∑–∏–π—Å–∫–∏–µ
        'perodua': ['perodua', '–ø–µ—Ä–æ–¥—É–∞'],
        # –†–µ–¥–∫–∏–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ
        'dr': ['dr', '–¥—Ä'],
        'ds': ['ds', '–¥—Å'],
        'belgee': ['belgee', '–±–µ–ª–¥–∂–∏', '–±–µ–ª–¥–∂–∏'],
        # –ö–∞—Å—Ç–æ–º/—Ç—é–Ω–∏–Ω–≥
        'mansory': ['mansory', '–º–∞–Ω—Å–æ—Ä–∏'],
        'hamann': ['hamann', '—Ö–∞–º–∞–Ω'],
        'g-power': ['g-power', '–¥–∂–∏-–ø–∞—É—ç—Ä', 'g power'],
    }
    
    # –≠–¢–ê–ü 1: –ü–æ–∏—Å–∫ –º–∞—Ä–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ (—Å–Ω–∞—á–∞–ª–∞ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –º–∞—Ä–∫–∏)
    found_brand = None
    brand_variants = None
    first_line_lower = first_line.lower()
    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –º–∞—Ä–æ–∫ (2-3 —Å–ª–æ–≤–∞)
    sorted_brands = sorted(brands_mapping.items(), key=lambda x: -max(len(v.split()) for v in x[1]))
    for brand_key, variants in sorted_brands:
        for variant in variants:
            variant_clean = variant.replace('-', ' ').lower()
            # –ò—â–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏ –±–µ–∑ –¥–µ—Ñ–∏—Å–∞
            if variant in first_line_lower or variant_clean in first_line_lower.replace('-', ' '):
                found_brand = brand_key
                brand_variants = variants
                print(f"‚úÖ –≠–¢–ê–ü 1: –ù–∞–π–¥–µ–Ω–∞ –º–∞—Ä–∫–∞ '{brand_key}' (–≤–∞—Ä–∏–∞–Ω—Ç '{variant}') –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ")
                break
        if found_brand:
            break
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –º–∞—Ä–∫–∞ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å
    if found_brand:
        # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–∏
        brand_pos = -1
        used_variant = None
        for variant in brand_variants:
            pos = first_line_lower.find(variant)
            if pos == -1:
                # –ü—Ä–æ–±—É–µ–º –±–µ–∑ –¥–µ—Ñ–∏—Å–∞
                pos = first_line_lower.replace('-', ' ').find(variant.replace('-', ' '))
            if pos != -1:
                brand_pos = pos
                used_variant = variant
                break
        if brand_pos != -1:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –º–∞—Ä–∫–∏
            after_brand = first_line[brand_pos + len(used_variant):].strip()
            # –£–±–∏—Ä–∞–µ–º –≥–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
            model_clean = re.sub(r'\s*(19|20)\d{2}.*', '', after_brand).strip()
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            model_clean = re.sub(r'[^\w\s-]', '', model_clean).strip()
            # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –º–æ–¥–µ–ª–∏
            service_words_model = {'–≥–æ–¥', '—Ç–∏–ø', '–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è', '–±–∏–∑–Ω–µ—Å', '–∫–ª–∞—Å—Å', '—Ç–∏–ø', 'new', '–Ω–æ–≤—ã–π', '–±–µ–∑', '—É—á–µ—Ç–∞', '—Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö', '—Ç–∞–º–æ–∂–Ω–∏', '–∞–≤—Ç–æ', '–º–∞—à–∏–Ω–∞', 'car', 'auto'}
            model_words = [w for w in model_clean.split() if w.lower() not in service_words_model]
            car_info.brand = found_brand.title()
            car_info.model = ' '.join(model_words) if model_words else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"
            print(f"‚úÖ –≠–¢–ê–ü 1: –ú–∞—Ä–∫–∞={car_info.brand}, –ú–æ–¥–µ–ª—å={car_info.model}")
    
    # –≠–¢–ê–ü 2: –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    if not car_info.brand:
        print("üîç –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è")
        
        patterns = [
            r'^([A-Za-z–ê-–Ø–∞-—è-]+)\s+([A-Za-z–ê-–Ø–∞-—è0-9\s-]+?)\s*(\d{4})',  # –ú–∞—Ä–∫–∞ –ú–æ–¥–µ–ª—å –ì–æ–¥
            r'^([A-Za-z–ê-–Ø–∞-—è-]+)\s+([A-Za-z–ê-–Ø–∞-—è0-9\s-]+)',  # –ú–∞—Ä–∫–∞ –ú–æ–¥–µ–ª—å
            r'([A-Za-z–ê-–Ø–∞-—è-]+)\s+([A-Za-z–ê-–Ø–∞-—è0-9\s-]+?)\s*(\d{4})',  # –ú–∞—Ä–∫–∞ –ú–æ–¥–µ–ª—å –ì–æ–¥ (–≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ)
        ]
        
        for i, pattern in enumerate(patterns):
            match = re.search(pattern, first_line)
            if match:
                potential_brand = match.group(1).strip()
                potential_model = match.group(2).strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
                service_words = ['–ø—Ä–æ–¥–∞–º', '–ø—Ä–æ–¥–∞–µ—Ç—Å—è', '–∞–≤—Ç–æ', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–º–∞—à–∏–Ω–∞', '—Ü–µ–Ω–∞', '–≥–æ–¥', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ']
                if potential_brand.lower() not in service_words and len(potential_brand) > 2:
                    car_info.brand = potential_brand.title()
                    car_info.model = potential_model
                    print(f"‚úÖ –≠–¢–ê–ü 2.{i+1}: –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω - –ú–∞—Ä–∫–∞={car_info.brand}, –ú–æ–¥–µ–ª—å={car_info.model}")
                    break
    
    # –≠–¢–ê–ü 3: –ü–æ–∏—Å–∫ –º–∞—Ä–∫–∏ –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É
    if not car_info.brand:
        print("üîç –≠–¢–ê–ü 3: –ü–æ–∏—Å–∫ –º–∞—Ä–∫–∏ –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É")
        text_lower = text.lower()
        service_words_model = {'–≥–æ–¥', '—Ç–∏–ø', '–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è', '–±–∏–∑–Ω–µ—Å', '–∫–ª–∞—Å—Å', '—Ç–∏–ø', 'new', '–Ω–æ–≤—ã–π', '–±–µ–∑', '—É—á–µ—Ç–∞', '—Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö', '—Ç–∞–º–æ–∂–Ω–∏', '–∞–≤—Ç–æ', '–º–∞—à–∏–Ω–∞', 'car', 'auto'}
        for brand_key, variants in brands_mapping.items():
            for variant in variants:
                pattern = rf'\b{re.escape(variant)}\b'
                match = re.search(pattern, text_lower)
                if match:
                    car_info.brand = brand_key.title()
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª—å —Ä—è–¥–æ–º
                    after = text[match.end():].strip().split()
                    model_words = []
                    for w in after:
                        if re.match(r'^(19|20)\d{2}$', w): break
                        if w.lower() in service_words_model: break
                        model_words.append(w)
                        if len(model_words) >= 2: break
                    car_info.model = ' '.join(model_words) if model_words else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å'
                    print(f"‚úÖ –≠–¢–ê–ü 3: –ù–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ - –ú–∞—Ä–∫–∞={car_info.brand}, –ú–æ–¥–µ–ª—å={car_info.model}")
                    break
            if car_info.brand:
                break
    
    # –≠–¢–ê–ü 4: –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π fallback - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ–≤–∞
    if not car_info.brand:
        print("üîç –≠–¢–ê–ü 4: –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π fallback")
        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç –º—É—Å–æ—Ä–∞
        clean_line = re.sub(r'[^-–∞-—è–ê-–Ø—ë–Å\s-]', ' ', first_line)
        words = [w for w in clean_line.split() if w.isalpha() and len(w) > 2]
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤
        service_words = {
            '–ø—Ä–æ–¥–∞–º', '–ø—Ä–æ–¥–∞–µ—Ç—Å—è', '–∞–≤—Ç–æ', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–º–∞—à–∏–Ω–∞', '—Ü–µ–Ω–∞', '–≥–æ–¥', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ', '–ø—Ä–æ–±–µ–≥',
            '–º–∏–Ω—Å–∫', '–º–∏–Ω—Å–∫–µ', '–±–µ–∑', '–≤', '–Ω–∞', '–∫—É–ø–∏—Ç—å', '–ø—Ä–æ–¥–∞–∂–∞', '–Ω–æ–≤—ã–π', '–±/—É', '–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è',
            '—Ü–≤–µ—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–∏–ª–∏', '–∏', '—Å', '–ø–æ', '–∑–∞', '–æ—Ç', '–¥–æ', '–Ω–æ–≤–∞—è', '–Ω–æ–≤–æ–µ',
            '–Ω–æ–≤—ã–µ', '–Ω–æ–≤—ã—Ö', '–Ω–æ–≤–æ–≥–æ', '–Ω–æ–≤–æ–π', '–Ω–æ–≤—ã–º', '–Ω–æ–≤—ã–º–∏', '–Ω–æ–≤—ã—Ö', '–Ω–æ–≤–æ–µ', '–Ω–æ–≤–∞—è', '–Ω–æ–≤—ã–π',
            '–Ω–æ–≤–æ–µ', '–Ω–æ–≤–∞—è', '–Ω–æ–≤—ã–π', '–Ω–æ–≤–æ–µ', '–Ω–æ–≤–∞—è', '–Ω–æ–≤—ã–π', '–Ω–æ–≤–æ–µ', '–Ω–æ–≤–∞—è', '–Ω–æ–≤—ã–π', '–Ω–æ–≤–æ–µ',
        }
        filtered_words = [w for w in words if w.lower() not in service_words]
        if len(filtered_words) >= 2:
            car_info.brand = filtered_words[0].title()
            car_info.model = filtered_words[1].title()
            print(f"‚úÖ –≠–¢–ê–ü 4: Fallback - –ú–∞—Ä–∫–∞={car_info.brand}, –ú–æ–¥–µ–ª—å={car_info.model}")
        elif len(filtered_words) == 1:
            car_info.brand = filtered_words[0].title()
            car_info.model = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"
            print(f"‚úÖ –≠–¢–ê–ü 4: Fallback - —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–∞={car_info.brand}")
        else:
            car_info.brand = "–ê–≤—Ç–æ–º–æ–±–∏–ª—å"
            car_info.model = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"
            print(f"‚úÖ –≠–¢–ê–ü 4: Fallback - –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞—é –¥–µ—Ñ–æ–ª—Ç")
    
    # –≠–¢–ê–ü 5: –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
    if not car_info.brand:
        print("üîç –≠–¢–ê–ü 5: –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        car_info.brand = "–ê–≤—Ç–æ–º–æ–±–∏–ª—å"
        car_info.model = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"
    
    print(f"üéØ –ò–¢–û–ì: –ú–∞—Ä–∫–∞='{car_info.brand}', –ú–æ–¥–µ–ª—å='{car_info.model}'")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ (4 —Ü–∏—Ñ—Ä—ã –æ—Ç 1980 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ + 2)
    current_year = datetime.now().year
    year_pattern = r'\b(19[8-9]\d|20[0-2]\d)\b'
    year_match = re.search(year_pattern, text)
    if year_match:
        year = int(year_match.group(1))
        if 1980 <= year <= current_year + 2:
            car_info.year = year
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ–¥: {car_info.year}")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê
    print("üîç –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö...")
    price_patterns = [
        r'(\d{1,3}(?:\s\d{3})*)\s*\$',  # 40 400$ (—Å –ø—Ä–æ–±–µ–ª–∞–º–∏)
        r'\$(\d{1,3}(?:,\d{3})*)',  # $25,000
        r'(\d{1,3}(?:,\d{3})*)\s*\$',  # 25,000$
        r'(\d{1,3}(?:,\d{3})*)\s*–¥–æ–ª–ª',  # 25000 –¥–æ–ª–ª
        r'(\d+)\s*—Ç—ã—Å.*–¥–æ–ª–ª',  # 25 —Ç—ã—Å –¥–æ–ª–ª
        r'price.*\$(\d{1,3}(?:,\d{3})*)',  # price: $25,000
        r'—Ü–µ–Ω–∞.*(\d{1,3}(?:,\d{3})*)\s*\$',  # —Ü–µ–Ω–∞ 25,000$
    ]
    
    for i, pattern in enumerate(price_patterns):
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            price_str = match.group(1).replace(',', '').replace(' ', '')  # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–æ–±–µ–ª—ã
            print(f"üîç –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω {i+1}: '{match.group(0)}' -> '{price_str}'")
            try:
                price = int(price_str)
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ "—Ç—ã—Å –¥–æ–ª–ª"
                if '—Ç—ã—Å' in match.group(0).lower():
                    price *= 1000
                    
                if 5000 <= price <= 500000:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è —Ü–µ–Ω—ã –∞–≤—Ç–æ
                    car_info.price = price
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: ${car_info.price}")
                    break
                else:
                    print(f"‚ùå –¶–µ–Ω–∞ {price} –≤–Ω–µ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤")
            except ValueError:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã: {price_str}")
                continue
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞
    print("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–±–µ–≥–∞...")
    mileage_patterns = [
        r'(\d{1,3}(?:,\d{3})*)\s*–∫–º',  # 150,000 –∫–º
        r'–ø—Ä–æ–±–µ–≥.*?(\d{1,3}(?:,\d{3})*)',  # –ø—Ä–æ–±–µ–≥: 150000
        r'(\d+)\s*—Ç—ã—Å.*–∫–º',  # 150 —Ç—ã—Å –∫–º
        r'mileage.*?(\d{1,3}(?:,\d{3})*)',  # mileage: 150000
    ]
    
    for pattern in mileage_patterns:
        match = re.search(pattern, text_lower)
        if match:
            mileage_str = match.group(1).replace(',', '')
            try:
                mileage = int(mileage_str)
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ "—Ç—ã—Å –∫–º"
                if '—Ç—ã—Å' in match.group(0):
                    mileage *= 1000
                    
                if 0 <= mileage <= 1000000:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è –ø—Ä–æ–±–µ–≥–∞
                    car_info.mileage = mileage
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–±–µ–≥: {car_info.mileage} –∫–º")
                    break
            except ValueError:
                continue
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ
    engine_patterns = [
        r'(\d\.?\d?)\s*[–ªl]',  # 2.0–ª –∏–ª–∏ 2–ª
        r'–¥–≤–∏–≥–∞—Ç.*?(\d\.?\d?)\s*[–ªl]',  # –¥–≤–∏–≥–∞—Ç–µ–ª—å 2.0–ª
        r'engine.*?(\d\.?\d?)\s*[lL]',  # engine 2.0L
    ]
    
    for pattern in engine_patterns:
        match = re.search(pattern, text_lower)
        if match:
            car_info.engine_volume = f"{match.group(1)}–ª"
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car_info.engine_volume}")
            break
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á
    transmission_keywords = {
        '–∞–≤—Ç–æ–º–∞—Ç': ['–∞–≤—Ç–æ–º–∞—Ç', 'automatic', '–∞–∫–ø–ø', 'auto'],
        '–º–µ—Ö–∞–Ω–∏–∫–∞': ['–º–µ—Ö–∞–Ω–∏–∫–∞', 'manual', '–º–∫–ø–ø', '–º–µ—Ö'],
        '–≤–∞—Ä–∏–∞—Ç–æ—Ä': ['–≤–∞—Ä–∏–∞—Ç–æ—Ä', 'cvt'],
        '—Ä–æ–±–æ—Ç': ['—Ä–æ–±–æ—Ç', 'dsg', 'amt']
    }
    
    for trans_type, keywords in transmission_keywords.items():
        for keyword in keywords:
            if keyword in text_lower:
                car_info.transmission = trans_type
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ö–ü–ü: {car_info.transmission}")
                break
        if car_info.transmission:
            break
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–≤–æ–¥–∞
    drive_keywords = {
        '–ø–æ–ª–Ω—ã–π': ['–ø–æ–ª–Ω—ã–π', 'awd', '4wd', 'quattro'],
        '–ø–µ—Ä–µ–¥–Ω–∏–π': ['–ø–µ—Ä–µ–¥–Ω–∏–π', 'fwd', 'front'],
        '–∑–∞–¥–Ω–∏–π': ['–∑–∞–¥–Ω–∏–π', 'rwd', 'rear']
    }
    
    for drive_type, keywords in drive_keywords.items():
        for keyword in keywords:
            if keyword in text_lower:
                car_info.drive_type = drive_type
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∏–≤–æ–¥: {car_info.drive_type}")
                break
        if car_info.drive_type:
            break
    
    print(f"üèÅ –§–ò–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï:")
    print(f"   –ú–∞—Ä–∫–∞: {car_info.brand}")
    print(f"   –ú–æ–¥–µ–ª—å: {car_info.model}")
    print(f"   –ì–æ–¥: {car_info.year}")
    print(f"   –¶–µ–Ω–∞: ${car_info.price}")
    print(f"   –ü—Ä–æ–±–µ–≥: {car_info.mileage} –∫–º")
    print(f"   –î–≤–∏–≥–∞—Ç–µ–ª—å: {car_info.engine_volume}")
    print(f"   –ö–ü–ü: {car_info.transmission}")
    print(f"   –ü—Ä–∏–≤–æ–¥: {car_info.drive_type}")
    
    return car_info

def create_car_description_prompt(car_info: CarInfo, custom_context: str = "") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è Perplexity API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    
    Args:
        car_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        custom_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è API
    """
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 100
    price_rub = None
    if car_info.price:
        rate = get_cbr_usd_rate_with_markup(2.0)
        if rate:
            price_rub = int(round(car_info.price * rate / 100) * 100)
    price_rub_str = f"{price_rub:,} ‚ÇΩ" if price_rub else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    prompt = f"""–°–æ–∑–¥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML –¥–ª—è Telegram. 

–ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
- –ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: {car_info.brand} {car_info.model}
- –ì–æ–¥: {car_info.year}
- –ü—Ä–æ–±–µ–≥: {car_info.mileage} –∫–º
- –¶–µ–Ω–∞: {price_rub_str}
- –î–≤–∏–≥–∞—Ç–µ–ª—å: {car_info.engine_volume}
- –ö–ü–ü: {car_info.transmission}
- –ü—Ä–∏–≤–æ–¥: {car_info.drive_type}
- –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: {car_info.trim}
- –¶–≤–µ—Ç: {car_info.color}
- –°–æ—Å—Ç–æ—è–Ω–∏–µ: {car_info.condition}

–°–¢–†–£–ö–¢–£–†–ê –û–ë–™–Ø–í–õ–ï–ù–ò–Ø:
1. –ó–∞–≥–æ–ª–æ–≤–æ–∫: üöó <b>[–ú–∞—Ä–∫–∞] [–ú–æ–¥–µ–ª—å] [–ì–æ–¥]</b>
2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ <blockquote>
3. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
4. –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö —Å –ø–æ–º–µ—Ç–∫–æ–π (–≤ –ú–∏–Ω—Å–∫–µ, –±–µ–∑ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (—Å–∏—Å—Ç–µ–º—ã, –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –æ–ø—Ü–∏–∏)
6. –•–µ—à—Ç–µ–≥–∏
7. CAR ID: <b>CAR ID:</b> <code>{car_info.custom_id or '–∞–≤—Ç–æ-–æ–Ω–ª–∞–π–Ω'}</code>

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ü–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Æ:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û HTML-—Ç–µ–≥–∏: <b></b>, <i></i>, <blockquote></blockquote>, <code></code>
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown (**, *, #, -, >)
- –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–µ–ª–∞–π –∂–∏—Ä–Ω—ã–º–∏: <b>üîç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>
- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–π –≤ <blockquote>–î–≤–∏–≥–∞—Ç–µ–ª—å: 2.0–ª
–ö–ü–ü: –∞–≤—Ç–æ–º–∞—Ç</blockquote>
- –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏

–ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
üöó <b>Geely Coolray 2023</b>
<b>üîç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>
<blockquote>–î–≤–∏–≥–∞—Ç–µ–ª—å: 2.0 –ª, –±–µ–Ω–∑–∏–Ω, 245 –ª.—Å.
–ö–ü–ü: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è
–ü—Ä–∏–≤–æ–¥: –ü–æ–ª–Ω—ã–π
–ü—Ä–æ–±–µ–≥: 50,000 –∫–º</blockquote>

<b>üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</b>
–°–æ—Å—Ç–æ—è–Ω–∏–µ: –•–æ—Ä–æ—à–µ–µ
–î–æ–∫—É–º–µ–Ω—Ç—ã: –í –Ω–∞–ª–∏—á–∏–∏

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ï–¢–ê–õ–ò –ö –î–û–ë–ê–í–õ–ï–ù–ò–Æ:
- –¢–æ—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏
- –°–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–º–æ—â–∏ –≤–æ–¥–∏—Ç–µ–ª—é
- –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –∏ connectivity (CarPlay/Android Auto)
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –æ–ø—Ü–∏–∏ (–∫–ª–∏–º–∞—Ç, –ø–æ–¥–æ–≥—Ä–µ–≤—ã, –¥–∞—Ç—á–∏–∫–∏)
- –†–∞–∑–º–µ—Ä—ã –±–∞–≥–∞–∂–Ω–∏–∫–∞ –∏ –∫–ª–∏—Ä–µ–Ω—Å
- –≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å (—Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞)

{custom_context}

–í–ê–ñ–ù–û: 
- –¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (RUB)
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∫–∞–∫–∏—Ö Markdown —Å–∏–º–≤–æ–ª–æ–≤
- –í—Å–µ –∂–∏—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ <b></b>
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¢–û–õ–¨–ö–û –≤ <blockquote></blockquote>

CAR ID –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π:
<b>CAR ID:</b> <code>{car_info.custom_id or '–∞–≤—Ç–æ-–æ–Ω–ª–∞–π–Ω'}</code>

–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ 900 —Å–∏–º–≤–æ–ª–æ–≤."""

    return prompt

def format_car_announcement(
    brand: str,
    model: str,
    year: int,
    price: float,
    description: str,
    characteristics: Dict[str, str],
    hashtags: List[str] = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    
    Args:
        brand: –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        model: –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è  
        year: –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞
        price: –¶–µ–Ω–∞
        description: –û–ø–∏—Å–∞–Ω–∏–µ
        characteristics: –°–ª–æ–≤–∞—Ä—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        hashtags: –°–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    """
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
    price_formatted = f"{int(price):,}".replace(',', ' ')
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"[{brand}] [{model}] [{year}] - –¶–µ–Ω–∞: {price_formatted} ‚ÇΩ"
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    desc_section = f"üí´ {description}"
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    char_lines = []
    if characteristics:
        char_lines.append("üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        main_chars = []
        if 'year' in characteristics:
            main_chars.append(f"–ì–æ–¥: {characteristics['year']}")
        if 'engine' in characteristics:
            main_chars.append(f"–î–≤–∏–≥–∞—Ç–µ–ª—å: {characteristics['engine']}")
        if 'mileage' in characteristics:
            main_chars.append(f"–ü—Ä–æ–±–µ–≥: {characteristics['mileage']}")
        
        if main_chars:
            char_lines.append("‚Ä¢ " + " | ".join(main_chars))
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        second_chars = []
        if 'transmission' in characteristics:
            second_chars.append(f"–ö–æ—Ä–æ–±–∫–∞: {characteristics['transmission']}")
        if 'drive' in characteristics:
            second_chars.append(f"–ü—Ä–∏–≤–æ–¥: {characteristics['drive']}")
        if 'body' in characteristics:
            second_chars.append(f"–ö—É–∑–æ–≤: {characteristics['body']}")
            
        if second_chars:
            char_lines.append("‚Ä¢ " + " | ".join(second_chars))
    
    # –°–ª–æ–≥–∞–Ω
    slogan = f"üöó {brand} {model} ‚Äî –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ!"
    
    # –•—ç—à—Ç–µ–≥–∏
    if not hashtags:
        hashtags = [
            f"#{brand.lower()}", 
            f"#{model.lower().replace(' ', '')}", 
            f"#{year}",
            "#–∞–≤—Ç–æ–º–æ–±–∏–ª—å", 
            "#–ø—Ä–æ–¥–∞–∂–∞"
        ]
    
    hashtag_line = " ".join(hashtags)
    
    # –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    sections = [header, "", desc_section]
    
    if char_lines:
        sections.append("")
        sections.extend(char_lines)
    
    sections.extend(["", slogan, "", hashtag_line])
    
    return "\n".join(sections)

def apply_markup_to_price(original_price: float, markup_percentage: float) -> float:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Ü–µ–Ω–∫—É –∫ —Ü–µ–Ω–µ
    
    Args:
        original_price: –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞
        markup_percentage: –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏
        
    Returns:
        –¶–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
    """
    return original_price * (1 + markup_percentage / 100)

def format_price_with_markup(car_info: CarInfo, markup_percentage: float = 15.0) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å –Ω–∞—Ü–µ–Ω–∫–æ–π –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    
    Args:
        car_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Å —Ü–µ–Ω–æ–π
        markup_percentage: –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    """
    if not car_info.price:
        return "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Ü–µ–Ω–∫—É
    final_price = apply_markup_to_price(car_info.price, markup_percentage)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    return f"${final_price:,.0f}"

def validate_car_announcement_format(text: str) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ–±—É–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        Tuple[bool, str]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    
    lines = text.strip().split('\n')
    if not lines:
        return False, "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"
    
    first_line = lines[0].strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    pattern = r'^\[.+\]\s*\[.+\]\s*\[\d{4}\]\s*-\s*–¶–µ–Ω–∞:\s*[\d\s]+.*‚ÇΩ?'
    
    if not re.match(pattern, first_line):
        return False, f"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É [–ú–∞—Ä–∫–∞] [–ú–æ–¥–µ–ª—å] [–ì–æ–¥] - –¶–µ–Ω–∞: [—Ü–µ–Ω–∞]. –ü–æ–ª—É—á–µ–Ω–æ: {first_line}"
    
    return True, "–§–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"

def extract_structured_data_from_announcement(text: str) -> Dict[str, str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    Args:
        text: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    data = {}
    
    lines = text.strip().split('\n')
    if not lines:
        return data
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    first_line = lines[0].strip()
    header_pattern = r'^\[(.+?)\]\s*\[(.+?)\]\s*\[(\d{4})\]\s*-\s*–¶–µ–Ω–∞:\s*([\d\s]+)'
    
    header_match = re.match(header_pattern, first_line)
    if header_match:
        data['brand'] = header_match.group(1)
        data['model'] = header_match.group(2)
        data['year'] = header_match.group(3)
        data['price'] = header_match.group(4).replace(' ', '')
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    for line in lines:
        if '|' in line and ('–ì–æ–¥:' in line or '–î–≤–∏–≥–∞—Ç–µ–ª—å:' in line):
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            parts = [part.strip() for part in line.split('|')]
            for part in parts:
                if ':' in part:
                    key_value = part.split(':', 1)
                    if len(key_value) == 2:
                        key = key_value[0].strip().replace('‚Ä¢ ', '')
                        value = key_value[1].strip()
                        data[key.lower()] = value
    
    return data

def convert_usd_to_rub_with_cbr(usd: float, markup: float = 2.0) -> int:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤ USD –≤ —Ä—É–±–ª–∏ –ø–æ –∫—É—Ä—Å—É –¶–ë –†–§ + –Ω–∞—Ü–µ–Ω–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2%)
    """
    rate = get_cbr_usd_rate_with_markup(markup)
    if rate and usd:
        return int(round(usd * rate))
    return 0 