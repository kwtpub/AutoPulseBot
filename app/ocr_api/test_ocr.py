"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR API –º–æ–¥—É–ª—è
"""

import os
import sys
import asyncio
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from app.ocr_api import (
    OCRClient, 
    OCRConfig, 
    extract_text_from_image,
    extract_caption_from_image,
    process_images_ocr,
    extract_text_legacy
)
from app.ocr_api.legacy_wrapper import OCRProcessor, test_ocr_connection, blip_image_caption


def print_test_result(test_name: str, result: Dict[str, Any], success: bool = True):
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
    status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
    print(f"\n{status} - {test_name}")
    print("-" * 50)
    
    if isinstance(result, dict):
        for key, value in result.items():
            print(f"{key}: {value}")
    else:
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    print("-" * 50)


async def test_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è OCR —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è OCR —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        status = test_ocr_connection()
        print_test_result("Health Check", status)
        return True
    except Exception as e:
        print_test_result("Health Check", {"error": str(e)}, False)
        return False


async def test_ocr_client():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ OCR –∫–ª–∏–µ–Ω—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –∫–ª–∏–µ–Ω—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç)
    test_image_path = create_test_image()
    
    try:
        # –¢–µ—Å—Ç —Å Tesseract
        config = OCRConfig(use_tesseract=True, use_yandex=False)
        client = OCRClient(config)
        
        text = await client.extract_text(test_image_path)
        print_test_result("OCR Client (Tesseract)", {"text": text, "length": len(text)})
        
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(test_image_path):
            os.remove(test_image_path)
        
        return True
        
    except Exception as e:
        print_test_result("OCR Client", {"error": str(e)}, False)
        if os.path.exists(test_image_path):
            os.remove(test_image_path)
        return False


async def test_yandex_ocr():
    """–¢–µ—Å—Ç Yandex OCR (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex OCR...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Yandex —Ç–æ–∫–µ–Ω–æ–≤
    from dotenv import load_dotenv
    load_dotenv()
    
    yandex_token = os.getenv('YANDEX_IAM_TOKEN')
    yandex_folder = os.getenv('YANDEX_FOLDER_ID')
    
    if not yandex_token or not yandex_folder:
        print_test_result("Yandex OCR", {"status": "–ü—Ä–æ–ø—É—â–µ–Ω - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤"})
        return True
    
    test_image_path = create_test_image()
    
    try:
        config = OCRConfig(use_yandex=True)
        client = OCRClient(config)
        
        text = await client.extract_text_yandex(test_image_path)
        print_test_result("Yandex OCR", {"text": text, "length": len(text)})
        
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(test_image_path):
            os.remove(test_image_path)
        
        return True
        
    except Exception as e:
        print_test_result("Yandex OCR", {"error": str(e)}, False)
        if os.path.exists(test_image_path):
            os.remove(test_image_path)
        return False


async def test_legacy_compatibility():
    """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º...")
    
    test_image_path = create_test_image()
    
    try:
        # –¢–µ—Å—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫–ª–∞—Å—Å–∞ OCRProcessor
        ocr = OCRProcessor(lang='ru', use_yandex=False)
        text = await ocr.extract_text(test_image_path)
        
        print_test_result("Legacy OCRProcessor", {"text": text, "length": len(text)})
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ extract_text_legacy
        text2 = await extract_text_legacy(test_image_path, use_yandex=False)
        print_test_result("Legacy Function", {"text": text2, "length": len(text2)})
        
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(test_image_path):
            os.remove(test_image_path)
        
        return True
        
    except Exception as e:
        print_test_result("Legacy Compatibility", {"error": str(e)}, False)
        if os.path.exists(test_image_path):
            os.remove(test_image_path)
        return False


async def test_high_level_functions():
    """–¢–µ—Å—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    test_image_path = create_test_image()
    
    try:
        # –¢–µ—Å—Ç extract_text_from_image
        text = await extract_text_from_image(test_image_path, use_yandex=False)
        print_test_result("High-level extract_text_from_image", {"text": text, "length": len(text)})
        
        # –¢–µ—Å—Ç process_images_ocr
        texts = await process_images_ocr([test_image_path], use_yandex=False)
        print_test_result("High-level process_images_ocr", {"texts": texts, "count": len(texts)})
        
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(test_image_path):
            os.remove(test_image_path)
        
        return True
        
    except Exception as e:
        print_test_result("High-level Functions", {"error": str(e)}, False)
        if os.path.exists(test_image_path):
            os.remove(test_image_path)
        return False


def create_test_image() -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º"""
    try:
        from PIL import Image, ImageDraw, ImageFont
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (400, 100), color='white')
        draw = ImageDraw.Draw(img)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        text = "Test OCR Text 123"
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
            font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 20)
        except:
            # –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            font = ImageFont.load_default()
        
        draw.text((10, 30), text, fill='black', font=font)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        temp_dir = "temp"
        if not os.path.exists(temp_dir):
            os.makedirs(temp_dir)
        
        test_path = os.path.join(temp_dir, "test_ocr_image.png")
        img.save(test_path)
        
        return test_path
        
    except ImportError:
        # –ï—Å–ª–∏ PIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª
        temp_dir = "temp"
        if not os.path.exists(temp_dir):
            os.makedirs(temp_dir)
        
        test_path = os.path.join(temp_dir, "test_ocr_dummy.txt")
        with open(test_path, "w") as f:
            f.write("dummy test file")
        
        return test_path


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OCR API –º–æ–¥—É–ª—è")
    print("=" * 60)
    
    tests = [
        test_health_check,
        test_ocr_client,
        test_yandex_ocr,
        test_legacy_compatibility,
        test_high_level_functions
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            result = await test()
            if result:
                passed += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if os.path.exists("temp"):
        import shutil
        shutil.rmtree("temp", ignore_errors=True)


if __name__ == "__main__":
    asyncio.run(main()) 